<?php

declare(strict_types=1);

/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpotifyWebAPILib\Authentication;

use CoreInterfaces\Core\Request\RequestMethod;
use CoreInterfaces\Core\Request\TypeValidatorInterface;
use Core\Authentication\CoreAuth;
use Core\Client;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\AdditionalQueryParams;
use Core\Request\RequestBuilder;
use Core\Utils\CoreHelper;
use InvalidArgumentException;
use SpotifyWebAPILib\Models\OAuthToken;
use SpotifyWebAPILib\Controllers\OAuthAuthorizationController;
use SpotifyWebAPILib\ConfigurationDefaults;
use SpotifyWebAPILib\AuthorizationCodeAuth;

/**
 * Utility class for OAuth 2 authorization and token management
 */
class AuthorizationCodeAuthManager extends CoreAuth implements AuthorizationCodeAuth
{
    private $client;

    /**
     * Singleton instance of OAuth 2 API controller
     * @var OAuthAuthorizationController
     */
    private $oAuthApi;

    /**
     * @var array
     */
    private $config;

    /**
     * @var OAuthToken|null
     */
    private $internalOAuthToken;

    public function __construct(array $config)
    {
        parent::__construct();
        $this->config = $config;
        $this->internalOAuthToken = $this->getOAuthToken();
    }

    public function setClient(Client $client): void
    {
        $this->client = $client;
        $this->oAuthApi = new OAuthAuthorizationController($client);
    }

    /**
     * String value for oAuthClientId.
     */
    public function getOAuthClientId(): string
    {
        return $this->config['oAuthClientId'] ?? ConfigurationDefaults::O_AUTH_CLIENT_ID;
    }

    /**
     * String value for oAuthClientSecret.
     */
    public function getOAuthClientSecret(): string
    {
        return $this->config['oAuthClientSecret'] ?? ConfigurationDefaults::O_AUTH_CLIENT_SECRET;
    }

    /**
     * String value for oAuthRedirectUri.
     */
    public function getOAuthRedirectUri(): string
    {
        return $this->config['oAuthRedirectUri'] ?? ConfigurationDefaults::O_AUTH_REDIRECT_URI;
    }

    /**
     * OAuthToken value for oAuthToken.
     */
    public function getOAuthToken(): ?OAuthToken
    {
        $oAuthToken = $this->config['oAuthToken'];
        if ($oAuthToken instanceof OAuthToken) {
            return clone $oAuthToken;
        }
        return ConfigurationDefaults::O_AUTH_TOKEN;
    }

    /**
     * OAuthScopeEnum value for oAuthScopes.
     */
    public function getOAuthScopes(): ?array
    {
        $oAuthScopes = $this->config['oAuthScopes'];
        if (is_array($oAuthScopes)) {
            return $oAuthScopes;
        }
        return ConfigurationDefaults::O_AUTH_SCOPES;
    }

    /**
     * Checks if provided credentials match with existing ones.
     *
     * @param string $oAuthClientId OAuth 2 Client ID
     * @param string $oAuthClientSecret OAuth 2 Client Secret
     * @param string $oAuthRedirectUri OAuth 2 Redirection endpoint or Callback Uri
     */
    public function equals(string $oAuthClientId, string $oAuthClientSecret, string $oAuthRedirectUri): bool
    {
        return $oAuthClientId == $this->getOAuthClientId() &&
            $oAuthClientSecret == $this->getOAuthClientSecret() &&
            $oAuthRedirectUri == $this->getOAuthRedirectUri();
    }

    /**
     * Clock skew time in seconds applied while checking the OAuth Token expiry.
     */
    public function getOAuthClockSkew(): int
    {
        return $this->config['oauth_2_0-ClockSkew'] ?? ConfigurationDefaults::OAUTH_2_0_CLOCK_SKEW;
    }

    /**
     * Build an authorization URL for taking the user's consent to access data.
     * @param  string|null       $state            An opaque state string
     * @param  array|null        $additionalParams Additional parameters to add the the authorization URL
     */
    public function buildAuthorizationUrl(?string $state = null, ?array $additionalParams = null): string
    {
        return (new RequestBuilder(RequestMethod::GET, '/authorize'))
            ->parameters(
                AdditionalQueryParams::init($additionalParams),
                AdditionalQueryParams::init([
                    'response_type' => 'code',
                    'client_id'     => $this->getOAuthClientId(),
                    'redirect_uri'  => $this->getOAuthRedirectUri(),
                    'scope'         => implode(' ', $this->getOAuthScopes() ?? []),
                    'state'         => $state
                ])
            )
            ->build($this->client)
            ->getQueryUrl();
    }

    /**
     * Fetch the OAuth token.
     * @param  string     $authorizationCode Authorization code returned by the OAuth provider.
     * @param  array|null $additionalParams  Additional parameters to send during authorization
     */
    public function fetchToken(string $authorizationCode, ?array $additionalParams = null): OAuthToken
    {
        //send request for access token
        $oAuthToken = $this->oAuthApi->requestToken(
            $this->buildBasicHeader(),
            $authorizationCode,
            $this->getOAuthRedirectUri() ?? "",
            $additionalParams
        )->getResult();

        $this->addExpiryTime($oAuthToken);

        return $oAuthToken;
    }

    /**
     * Refresh the OAuth token.
     * @param  array|null        $additionalParams Additional parameters to send during token refresh
     */
    public function refreshToken(?array $additionalParams = null): OAuthToken
    {
        //send request for token refresh
        $oAuthToken = $this->oAuthApi->refreshToken(
            $this->buildBasicHeader(),
            $this->getOAuthToken()->getRefreshToken() ?? "",
            implode(' ', $this->getOAuthScopes() ?? []),
            $additionalParams
        )->getResult();

        $this->addExpiryTime($oAuthToken);

        return $oAuthToken;
    }

    /**
     * Has the OAuth token expired? If the token argument is not provided then this function will check the expiry of
     * initial oauthToken, that's set in the client initialization.
     */
    public function isTokenExpired(?OAuthToken $token = null): bool
    {
        $token = $token ?? $this->getOAuthToken();
        if ($token == null || empty($token->getExpiry())) {
            return true;
        }
        return $token->getExpiry() < time() + $this->getOAuthClockSkew();
    }

    /**
     * Check if client is authorized, throws exceptions when token is null or expired.
     *
     * @throws InvalidArgumentException
     */
    public function validate(TypeValidatorInterface $validator): void
    {
        if ($this->internalOAuthToken == null) {
            throw new InvalidArgumentException('Client is not authorized. An OAuth token is needed to make API calls.');
        }
        if ($this->isTokenExpired($this->internalOAuthToken)) {
            throw new InvalidArgumentException('OAuth token is expired. A valid token is needed to make API calls.');
        }
        parent::__construct(
            HeaderParam::init(
                'Authorization',
                CoreHelper::getBearerAuthString($this->internalOAuthToken->getAccessToken())
            )->requiredNonEmpty()
        );
        parent::validate($validator);
    }

    /**
     * Build authorization header value for basic auth.
     */
    private function buildBasicHeader(): string
    {
        return 'Basic ' . base64_encode(
            $this->getOAuthClientId() . ':' . $this->getOAuthClientSecret()
        );
    }

    /**
     * Adds the expiry time to the given oAuthToken instance.
     */
    private function addExpiryTime(OAuthToken $oAuthToken): void
    {
        $expiresIn = $oAuthToken->getExpiresIn();
        if (empty($expiresIn)) {
            return;
        }
        $oAuthToken->setExpiry(time() + $expiresIn);
    }
}
