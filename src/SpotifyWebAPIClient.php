<?php

declare(strict_types=1);

/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpotifyWebAPILib;

use Core\ClientBuilder;
use Core\Utils\CoreHelper;
use SpotifyWebAPILib\Authentication\AuthorizationCodeAuthCredentialsBuilder;
use SpotifyWebAPILib\Authentication\AuthorizationCodeAuthManager;
use SpotifyWebAPILib\Controllers\AlbumsController;
use SpotifyWebAPILib\Controllers\ArtistsController;
use SpotifyWebAPILib\Controllers\AudiobooksController;
use SpotifyWebAPILib\Controllers\CategoriesController;
use SpotifyWebAPILib\Controllers\ChaptersController;
use SpotifyWebAPILib\Controllers\EpisodesController;
use SpotifyWebAPILib\Controllers\GenresController;
use SpotifyWebAPILib\Controllers\MarketsController;
use SpotifyWebAPILib\Controllers\OAuthAuthorizationController;
use SpotifyWebAPILib\Controllers\PlayerController;
use SpotifyWebAPILib\Controllers\PlaylistsController;
use SpotifyWebAPILib\Controllers\SearchController;
use SpotifyWebAPILib\Controllers\ShowsController;
use SpotifyWebAPILib\Controllers\TracksController;
use SpotifyWebAPILib\Controllers\UsersController;
use SpotifyWebAPILib\Utils\CompatibilityConverter;
use Unirest\Configuration;
use Unirest\HttpClient;

class SpotifyWebAPIClient implements ConfigurationInterface
{
    private $albums;

    private $artists;

    private $audiobooks;

    private $categories;

    private $chapters;

    private $episodes;

    private $genres;

    private $markets;

    private $player;

    private $playlists;

    private $search;

    private $shows;

    private $tracks;

    private $users;

    private $oAuthAuthorization;

    private $authorizationCodeAuthManager;

    private $config;

    private $client;

    /**
     * @see SpotifyWebAPIClientBuilder::init()
     * @see SpotifyWebAPIClientBuilder::build()
     *
     * @param array $config
     */
    public function __construct(array $config = [])
    {
        $this->config = array_merge(ConfigurationDefaults::_ALL, CoreHelper::clone($config));
        $this->authorizationCodeAuthManager = new AuthorizationCodeAuthManager($this->config);
        $this->validateConfig();
        $this->client = ClientBuilder::init(new HttpClient(Configuration::init($this)))
            ->converter(new CompatibilityConverter())
            ->jsonHelper(ApiHelper::getJsonHelper())
            ->apiCallback($this->config['httpCallback'] ?? null)
            ->userAgent('APIMATIC 3.0')
            ->serverUrls(self::ENVIRONMENT_MAP[$this->getEnvironment()], Server::DEFAULT_)
            ->authManagers(['oauth_2_0' => $this->authorizationCodeAuthManager])
            ->build();
        $this->authorizationCodeAuthManager->setClient($this->client);
    }

    /**
     * Create a builder with the current client's configurations.
     *
     * @return SpotifyWebAPIClientBuilder SpotifyWebAPIClientBuilder instance
     */
    public function toBuilder(): SpotifyWebAPIClientBuilder
    {
        $builder = SpotifyWebAPIClientBuilder::init()
            ->timeout($this->getTimeout())
            ->enableRetries($this->shouldEnableRetries())
            ->numberOfRetries($this->getNumberOfRetries())
            ->retryInterval($this->getRetryInterval())
            ->backOffFactor($this->getBackOffFactor())
            ->maximumRetryWaitTime($this->getMaximumRetryWaitTime())
            ->retryOnTimeout($this->shouldRetryOnTimeout())
            ->httpStatusCodesToRetry($this->getHttpStatusCodesToRetry())
            ->httpMethodsToRetry($this->getHttpMethodsToRetry())
            ->environment($this->getEnvironment())
            ->httpCallback($this->config['httpCallback'] ?? null);

        $authorizationCodeAuth = $this->getAuthorizationCodeAuthCredentialsBuilder();
        if ($authorizationCodeAuth != null) {
            $builder->authorizationCodeAuthCredentials($authorizationCodeAuth);
        }
        return $builder;
    }

    public function getTimeout(): int
    {
        return $this->config['timeout'] ?? ConfigurationDefaults::TIMEOUT;
    }

    public function shouldEnableRetries(): bool
    {
        return $this->config['enableRetries'] ?? ConfigurationDefaults::ENABLE_RETRIES;
    }

    public function getNumberOfRetries(): int
    {
        return $this->config['numberOfRetries'] ?? ConfigurationDefaults::NUMBER_OF_RETRIES;
    }

    public function getRetryInterval(): float
    {
        return $this->config['retryInterval'] ?? ConfigurationDefaults::RETRY_INTERVAL;
    }

    public function getBackOffFactor(): float
    {
        return $this->config['backOffFactor'] ?? ConfigurationDefaults::BACK_OFF_FACTOR;
    }

    public function getMaximumRetryWaitTime(): int
    {
        return $this->config['maximumRetryWaitTime'] ?? ConfigurationDefaults::MAXIMUM_RETRY_WAIT_TIME;
    }

    public function shouldRetryOnTimeout(): bool
    {
        return $this->config['retryOnTimeout'] ?? ConfigurationDefaults::RETRY_ON_TIMEOUT;
    }

    public function getHttpStatusCodesToRetry(): array
    {
        return $this->config['httpStatusCodesToRetry'] ?? ConfigurationDefaults::HTTP_STATUS_CODES_TO_RETRY;
    }

    public function getHttpMethodsToRetry(): array
    {
        return $this->config['httpMethodsToRetry'] ?? ConfigurationDefaults::HTTP_METHODS_TO_RETRY;
    }

    public function getEnvironment(): string
    {
        return $this->config['environment'] ?? ConfigurationDefaults::ENVIRONMENT;
    }

    public function getAuthorizationCodeAuth(): AuthorizationCodeAuth
    {
        return $this->authorizationCodeAuthManager;
    }

    public function getAuthorizationCodeAuthCredentialsBuilder(): ?AuthorizationCodeAuthCredentialsBuilder
    {
        if (
            empty($this->authorizationCodeAuthManager->getOAuthClientId()) &&
            empty($this->authorizationCodeAuthManager->getOAuthClientSecret()) &&
            empty($this->authorizationCodeAuthManager->getOAuthRedirectUri())
        ) {
            return null;
        }
        return AuthorizationCodeAuthCredentialsBuilder::init(
            $this->authorizationCodeAuthManager->getOAuthClientId(),
            $this->authorizationCodeAuthManager->getOAuthClientSecret(),
            $this->authorizationCodeAuthManager->getOAuthRedirectUri()
        )
            ->oAuthToken($this->authorizationCodeAuthManager->getOAuthToken())
            ->oAuthScopes($this->authorizationCodeAuthManager->getOAuthScopes());
    }

    /**
     * Get the client configuration as an associative array
     *
     * @see SpotifyWebAPIClientBuilder::getConfiguration()
     */
    public function getConfiguration(): array
    {
        return $this->toBuilder()->getConfiguration();
    }

    /**
     * Clone this client and override given configuration options
     *
     * @see SpotifyWebAPIClientBuilder::build()
     */
    public function withConfiguration(array $config): self
    {
        return new self(array_merge($this->config, $config));
    }

    /**
     * Validate required configuration variables
     */
    private function validateConfig(): void
    {
        $builder = SpotifyWebAPIClientBuilder::init();

        $authorizationCodeAuth = $this->getAuthorizationCodeAuthCredentialsBuilder();
        if ($authorizationCodeAuth != null) {
            $builder->authorizationCodeAuthCredentials($authorizationCodeAuth);
        }
    }

    /**
     * Get the base uri for a given server in the current environment.
     *
     * @param string $server Server name
     *
     * @return string Base URI
     */
    public function getBaseUri(string $server = Server::DEFAULT_): string
    {
        return $this->client->getGlobalRequest($server)->getQueryUrl();
    }

    /**
     * Returns Albums Controller
     */
    public function getAlbumsController(): AlbumsController
    {
        if ($this->albums == null) {
            $this->albums = new AlbumsController($this->client);
        }
        return $this->albums;
    }

    /**
     * Returns Artists Controller
     */
    public function getArtistsController(): ArtistsController
    {
        if ($this->artists == null) {
            $this->artists = new ArtistsController($this->client);
        }
        return $this->artists;
    }

    /**
     * Returns Audiobooks Controller
     */
    public function getAudiobooksController(): AudiobooksController
    {
        if ($this->audiobooks == null) {
            $this->audiobooks = new AudiobooksController($this->client);
        }
        return $this->audiobooks;
    }

    /**
     * Returns Categories Controller
     */
    public function getCategoriesController(): CategoriesController
    {
        if ($this->categories == null) {
            $this->categories = new CategoriesController($this->client);
        }
        return $this->categories;
    }

    /**
     * Returns Chapters Controller
     */
    public function getChaptersController(): ChaptersController
    {
        if ($this->chapters == null) {
            $this->chapters = new ChaptersController($this->client);
        }
        return $this->chapters;
    }

    /**
     * Returns Episodes Controller
     */
    public function getEpisodesController(): EpisodesController
    {
        if ($this->episodes == null) {
            $this->episodes = new EpisodesController($this->client);
        }
        return $this->episodes;
    }

    /**
     * Returns Genres Controller
     */
    public function getGenresController(): GenresController
    {
        if ($this->genres == null) {
            $this->genres = new GenresController($this->client);
        }
        return $this->genres;
    }

    /**
     * Returns Markets Controller
     */
    public function getMarketsController(): MarketsController
    {
        if ($this->markets == null) {
            $this->markets = new MarketsController($this->client);
        }
        return $this->markets;
    }

    /**
     * Returns Player Controller
     */
    public function getPlayerController(): PlayerController
    {
        if ($this->player == null) {
            $this->player = new PlayerController($this->client);
        }
        return $this->player;
    }

    /**
     * Returns Playlists Controller
     */
    public function getPlaylistsController(): PlaylistsController
    {
        if ($this->playlists == null) {
            $this->playlists = new PlaylistsController($this->client);
        }
        return $this->playlists;
    }

    /**
     * Returns Search Controller
     */
    public function getSearchController(): SearchController
    {
        if ($this->search == null) {
            $this->search = new SearchController($this->client);
        }
        return $this->search;
    }

    /**
     * Returns Shows Controller
     */
    public function getShowsController(): ShowsController
    {
        if ($this->shows == null) {
            $this->shows = new ShowsController($this->client);
        }
        return $this->shows;
    }

    /**
     * Returns Tracks Controller
     */
    public function getTracksController(): TracksController
    {
        if ($this->tracks == null) {
            $this->tracks = new TracksController($this->client);
        }
        return $this->tracks;
    }

    /**
     * Returns Users Controller
     */
    public function getUsersController(): UsersController
    {
        if ($this->users == null) {
            $this->users = new UsersController($this->client);
        }
        return $this->users;
    }

    /**
     * Returns O Auth Authorization Controller
     */
    public function getOAuthAuthorizationController(): OAuthAuthorizationController
    {
        if ($this->oAuthAuthorization == null) {
            $this->oAuthAuthorization = new OAuthAuthorizationController($this->client);
        }
        return $this->oAuthAuthorization;
    }

    /**
     * A map of all base urls used in different environments and servers
     *
     * @var array
     */
    private const ENVIRONMENT_MAP = [
        Environment::PRODUCTION => [
            Server::DEFAULT_ => 'https://api.spotify.com/v1',
            Server::AUTH_SERVER => 'https://accounts.spotify.com'
        ]
    ];
}
