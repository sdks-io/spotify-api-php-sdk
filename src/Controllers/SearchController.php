<?php

declare(strict_types=1);

/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpotifyWebAPILib\Controllers;

use Core\Request\Parameters\QueryParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use SpotifyWebAPILib\Exceptions\ForbiddenException;
use SpotifyWebAPILib\Exceptions\TooManyRequestsException;
use SpotifyWebAPILib\Exceptions\UnauthorizedException;
use SpotifyWebAPILib\Http\ApiResponse;
use SpotifyWebAPILib\Models\IncludeExternalEnum;
use SpotifyWebAPILib\Models\ItemTypeEnum;
use SpotifyWebAPILib\Models\SearchItems;

class SearchController extends BaseController
{
    /**
     * Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or
     * audiobooks
     * that match a keyword string. Audiobooks are only available within the US, UK, Canada, Ireland, New
     * Zealand and Australia markets.
     *
     *
     * @param string $q
     * @param string[] $type
     * @param string|null $market
     * @param int|null $limit
     * @param int|null $offset
     * @param string|null $includeExternal
     *
     * @return ApiResponse Response from the API call
     */
    public function search(
        string $q,
        array $type,
        ?string $market = null,
        ?int $limit = 20,
        ?int $offset = 0,
        ?string $includeExternal = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/search')
            ->auth('oauth_2_0')
            ->parameters(
                QueryParam::init('q', $q)->commaSeparated(),
                QueryParam::init('type', $type)->commaSeparated()->serializeBy([ItemTypeEnum::class, 'checkValue']),
                QueryParam::init('market', $market)->commaSeparated(),
                QueryParam::init('limit', $limit)->commaSeparated(),
                QueryParam::init('offset', $offset)->commaSeparated(),
                QueryParam::init('include_external', $includeExternal)
                    ->commaSeparated()
                    ->serializeBy([IncludeExternalEnum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    "Bad or expired token. This can happen if the user revoked a token or\nthe " .
                    "access token has expired. You should re-authenticate the user.\n",
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). " .
                    "Unfortunately, re-authenticating the user won't help here.\n",
                    ForbiddenException::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init("The app has exceeded its rate limits.\n", TooManyRequestsException::class)
            )
            ->type(SearchItems::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
