<?php

declare(strict_types=1);

/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpotifyWebAPILib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use SpotifyWebAPILib\Exceptions\ForbiddenException;
use SpotifyWebAPILib\Exceptions\TooManyRequestsException;
use SpotifyWebAPILib\Exceptions\UnauthorizedException;
use SpotifyWebAPILib\Http\ApiResponse;
use SpotifyWebAPILib\Models\AudioAnalysisObject;
use SpotifyWebAPILib\Models\AudioFeaturesObject;
use SpotifyWebAPILib\Models\ManyAudioFeatures;
use SpotifyWebAPILib\Models\ManyTracks;
use SpotifyWebAPILib\Models\MeTracksRequest;
use SpotifyWebAPILib\Models\MeTracksRequest1;
use SpotifyWebAPILib\Models\PagingSavedTrackObject;
use SpotifyWebAPILib\Models\RecommendationsObject;
use SpotifyWebAPILib\Models\TrackObject;

class TracksController extends BaseController
{
    /**
     * Get Spotify catalog information for a single track identified by its
     * unique Spotify ID.
     *
     *
     * @param string $id
     * @param string|null $market
     *
     * @return ApiResponse Response from the API call
     */
    public function getTrack(string $id, ?string $market = null): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/tracks/{id}')
            ->auth('oauth_2_0')
            ->parameters(TemplateParam::init('id', $id), QueryParam::init('market', $market)->commaSeparated());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    "Bad or expired token. This can happen if the user revoked a token or\nthe " .
                    "access token has expired. You should re-authenticate the user.\n",
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). " .
                    "Unfortunately, re-authenticating the user won't help here.\n",
                    ForbiddenException::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init("The app has exceeded its rate limits.\n", TooManyRequestsException::class)
            )
            ->type(TrackObject::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get Spotify catalog information for multiple tracks based on their Spotify IDs.
     *
     *
     * @param string $ids
     * @param string|null $market
     *
     * @return ApiResponse Response from the API call
     */
    public function getSeveralTracks(string $ids, ?string $market = null): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/tracks')
            ->auth('oauth_2_0')
            ->parameters(
                QueryParam::init('ids', $ids)->commaSeparated(),
                QueryParam::init('market', $market)->commaSeparated()
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    "Bad or expired token. This can happen if the user revoked a token or\nthe " .
                    "access token has expired. You should re-authenticate the user.\n",
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). " .
                    "Unfortunately, re-authenticating the user won't help here.\n",
                    ForbiddenException::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init("The app has exceeded its rate limits.\n", TooManyRequestsException::class)
            )
            ->type(ManyTracks::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get a list of the songs saved in the current Spotify user's 'Your Music' library.
     *
     *
     * @param string|null $market
     * @param int|null $limit
     * @param int|null $offset
     *
     * @return ApiResponse Response from the API call
     */
    public function getUsersSavedTracks(?string $market = null, ?int $limit = 20, ?int $offset = 0): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/me/tracks')
            ->auth('oauth_2_0')
            ->parameters(
                QueryParam::init('market', $market)->commaSeparated(),
                QueryParam::init('limit', $limit)->commaSeparated(),
                QueryParam::init('offset', $offset)->commaSeparated()
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    "Bad or expired token. This can happen if the user revoked a token or\nthe " .
                    "access token has expired. You should re-authenticate the user.\n",
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). " .
                    "Unfortunately, re-authenticating the user won't help here.\n",
                    ForbiddenException::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init("The app has exceeded its rate limits.\n", TooManyRequestsException::class)
            )
            ->type(PagingSavedTrackObject::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Save one or more tracks to the current user's 'Your Music' library.
     *
     *
     * @param string $ids
     * @param MeTracksRequest|null $body
     *
     * @return ApiResponse Response from the API call
     */
    public function saveTracksUser(string $ids, ?MeTracksRequest $body = null): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/me/tracks')
            ->auth('oauth_2_0')
            ->parameters(
                QueryParam::init('ids', $ids)->commaSeparated(),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    "Bad or expired token. This can happen if the user revoked a token or\nthe " .
                    "access token has expired. You should re-authenticate the user.\n",
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). " .
                    "Unfortunately, re-authenticating the user won't help here.\n",
                    ForbiddenException::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init("The app has exceeded its rate limits.\n", TooManyRequestsException::class)
            )
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Remove one or more tracks from the current user's 'Your Music' library.
     *
     *
     * @param string $ids
     * @param MeTracksRequest1|null $body
     *
     * @return ApiResponse Response from the API call
     */
    public function removeTracksUser(string $ids, ?MeTracksRequest1 $body = null): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/me/tracks')
            ->auth('oauth_2_0')
            ->parameters(
                QueryParam::init('ids', $ids)->commaSeparated(),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    "Bad or expired token. This can happen if the user revoked a token or\nthe " .
                    "access token has expired. You should re-authenticate the user.\n",
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). " .
                    "Unfortunately, re-authenticating the user won't help here.\n",
                    ForbiddenException::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init("The app has exceeded its rate limits.\n", TooManyRequestsException::class)
            )
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Check if one or more tracks is already saved in the current Spotify user's 'Your Music' library.
     *
     *
     * @param string $ids
     *
     * @return ApiResponse Response from the API call
     */
    public function checkUsersSavedTracks(string $ids): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/me/tracks/contains')
            ->auth('oauth_2_0')
            ->parameters(QueryParam::init('ids', $ids)->commaSeparated());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    "Bad or expired token. This can happen if the user revoked a token or\nthe " .
                    "access token has expired. You should re-authenticate the user.\n",
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). " .
                    "Unfortunately, re-authenticating the user won't help here.\n",
                    ForbiddenException::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init("The app has exceeded its rate limits.\n", TooManyRequestsException::class)
            )
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get audio features for multiple tracks based on their Spotify IDs.
     *
     *
     * @param string $ids
     *
     * @return ApiResponse Response from the API call
     */
    public function getSeveralAudioFeatures(string $ids): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/audio-features')
            ->auth('oauth_2_0')
            ->parameters(QueryParam::init('ids', $ids)->commaSeparated());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    "Bad or expired token. This can happen if the user revoked a token or\nthe " .
                    "access token has expired. You should re-authenticate the user.\n",
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). " .
                    "Unfortunately, re-authenticating the user won't help here.\n",
                    ForbiddenException::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init("The app has exceeded its rate limits.\n", TooManyRequestsException::class)
            )
            ->type(ManyAudioFeatures::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get audio feature information for a single track identified by its unique
     * Spotify ID.
     *
     *
     * @param string $id
     *
     * @return ApiResponse Response from the API call
     */
    public function getAudioFeatures(string $id): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/audio-features/{id}')
            ->auth('oauth_2_0')
            ->parameters(TemplateParam::init('id', $id));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    "Bad or expired token. This can happen if the user revoked a token or\nthe " .
                    "access token has expired. You should re-authenticate the user.\n",
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). " .
                    "Unfortunately, re-authenticating the user won't help here.\n",
                    ForbiddenException::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init("The app has exceeded its rate limits.\n", TooManyRequestsException::class)
            )
            ->type(AudioFeaturesObject::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the
     * track’s structure and musical content, including rhythm, pitch, and timbre.
     *
     *
     * @param string $id
     *
     * @return ApiResponse Response from the API call
     */
    public function getAudioAnalysis(string $id): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/audio-analysis/{id}')
            ->auth('oauth_2_0')
            ->parameters(TemplateParam::init('id', $id));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    "Bad or expired token. This can happen if the user revoked a token or\nthe " .
                    "access token has expired. You should re-authenticate the user.\n",
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). " .
                    "Unfortunately, re-authenticating the user won't help here.\n",
                    ForbiddenException::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init("The app has exceeded its rate limits.\n", TooManyRequestsException::class)
            )
            ->type(AudioAnalysisObject::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Recommendations are generated based on the available information for a given seed entity and matched
     * against similar artists and tracks. If there is sufficient information about the provided seeds, a
     * list of tracks will be returned together with pool size details.
     *
     * For artists and tracks that are very new or obscure there might not be enough data to generate a
     * list of tracks.
     *
     *
     * @param int|null $limit
     * @param string|null $market
     * @param string|null $seedArtists
     * @param string|null $seedGenres
     * @param string|null $seedTracks
     * @param float|null $minAcousticness
     * @param float|null $maxAcousticness
     * @param float|null $targetAcousticness
     * @param float|null $minDanceability
     * @param float|null $maxDanceability
     * @param float|null $targetDanceability
     * @param int|null $minDurationMs
     * @param int|null $maxDurationMs
     * @param int|null $targetDurationMs
     * @param float|null $minEnergy
     * @param float|null $maxEnergy
     * @param float|null $targetEnergy
     * @param float|null $minInstrumentalness
     * @param float|null $maxInstrumentalness
     * @param float|null $targetInstrumentalness
     * @param int|null $minKey
     * @param int|null $maxKey
     * @param int|null $targetKey
     * @param float|null $minLiveness
     * @param float|null $maxLiveness
     * @param float|null $targetLiveness
     * @param float|null $minLoudness
     * @param float|null $maxLoudness
     * @param float|null $targetLoudness
     * @param int|null $minMode
     * @param int|null $maxMode
     * @param int|null $targetMode
     * @param int|null $minPopularity
     * @param int|null $maxPopularity
     * @param int|null $targetPopularity
     * @param float|null $minSpeechiness
     * @param float|null $maxSpeechiness
     * @param float|null $targetSpeechiness
     * @param float|null $minTempo
     * @param float|null $maxTempo
     * @param float|null $targetTempo
     * @param int|null $minTimeSignature
     * @param int|null $maxTimeSignature
     * @param int|null $targetTimeSignature
     * @param float|null $minValence
     * @param float|null $maxValence
     * @param float|null $targetValence
     *
     * @return ApiResponse Response from the API call
     */
    public function getRecommendations(
        ?int $limit = 20,
        ?string $market = null,
        ?string $seedArtists = null,
        ?string $seedGenres = null,
        ?string $seedTracks = null,
        ?float $minAcousticness = null,
        ?float $maxAcousticness = null,
        ?float $targetAcousticness = null,
        ?float $minDanceability = null,
        ?float $maxDanceability = null,
        ?float $targetDanceability = null,
        ?int $minDurationMs = null,
        ?int $maxDurationMs = null,
        ?int $targetDurationMs = null,
        ?float $minEnergy = null,
        ?float $maxEnergy = null,
        ?float $targetEnergy = null,
        ?float $minInstrumentalness = null,
        ?float $maxInstrumentalness = null,
        ?float $targetInstrumentalness = null,
        ?int $minKey = null,
        ?int $maxKey = null,
        ?int $targetKey = null,
        ?float $minLiveness = null,
        ?float $maxLiveness = null,
        ?float $targetLiveness = null,
        ?float $minLoudness = null,
        ?float $maxLoudness = null,
        ?float $targetLoudness = null,
        ?int $minMode = null,
        ?int $maxMode = null,
        ?int $targetMode = null,
        ?int $minPopularity = null,
        ?int $maxPopularity = null,
        ?int $targetPopularity = null,
        ?float $minSpeechiness = null,
        ?float $maxSpeechiness = null,
        ?float $targetSpeechiness = null,
        ?float $minTempo = null,
        ?float $maxTempo = null,
        ?float $targetTempo = null,
        ?int $minTimeSignature = null,
        ?int $maxTimeSignature = null,
        ?int $targetTimeSignature = null,
        ?float $minValence = null,
        ?float $maxValence = null,
        ?float $targetValence = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/recommendations')
            ->auth('oauth_2_0')
            ->parameters(
                QueryParam::init('limit', $limit)->commaSeparated(),
                QueryParam::init('market', $market)->commaSeparated(),
                QueryParam::init('seed_artists', $seedArtists)->commaSeparated(),
                QueryParam::init('seed_genres', $seedGenres)->commaSeparated(),
                QueryParam::init('seed_tracks', $seedTracks)->commaSeparated(),
                QueryParam::init('min_acousticness', $minAcousticness)->commaSeparated(),
                QueryParam::init('max_acousticness', $maxAcousticness)->commaSeparated(),
                QueryParam::init('target_acousticness', $targetAcousticness)->commaSeparated(),
                QueryParam::init('min_danceability', $minDanceability)->commaSeparated(),
                QueryParam::init('max_danceability', $maxDanceability)->commaSeparated(),
                QueryParam::init('target_danceability', $targetDanceability)->commaSeparated(),
                QueryParam::init('min_duration_ms', $minDurationMs)->commaSeparated(),
                QueryParam::init('max_duration_ms', $maxDurationMs)->commaSeparated(),
                QueryParam::init('target_duration_ms', $targetDurationMs)->commaSeparated(),
                QueryParam::init('min_energy', $minEnergy)->commaSeparated(),
                QueryParam::init('max_energy', $maxEnergy)->commaSeparated(),
                QueryParam::init('target_energy', $targetEnergy)->commaSeparated(),
                QueryParam::init('min_instrumentalness', $minInstrumentalness)->commaSeparated(),
                QueryParam::init('max_instrumentalness', $maxInstrumentalness)->commaSeparated(),
                QueryParam::init('target_instrumentalness', $targetInstrumentalness)->commaSeparated(),
                QueryParam::init('min_key', $minKey)->commaSeparated(),
                QueryParam::init('max_key', $maxKey)->commaSeparated(),
                QueryParam::init('target_key', $targetKey)->commaSeparated(),
                QueryParam::init('min_liveness', $minLiveness)->commaSeparated(),
                QueryParam::init('max_liveness', $maxLiveness)->commaSeparated(),
                QueryParam::init('target_liveness', $targetLiveness)->commaSeparated(),
                QueryParam::init('min_loudness', $minLoudness)->commaSeparated(),
                QueryParam::init('max_loudness', $maxLoudness)->commaSeparated(),
                QueryParam::init('target_loudness', $targetLoudness)->commaSeparated(),
                QueryParam::init('min_mode', $minMode)->commaSeparated(),
                QueryParam::init('max_mode', $maxMode)->commaSeparated(),
                QueryParam::init('target_mode', $targetMode)->commaSeparated(),
                QueryParam::init('min_popularity', $minPopularity)->commaSeparated(),
                QueryParam::init('max_popularity', $maxPopularity)->commaSeparated(),
                QueryParam::init('target_popularity', $targetPopularity)->commaSeparated(),
                QueryParam::init('min_speechiness', $minSpeechiness)->commaSeparated(),
                QueryParam::init('max_speechiness', $maxSpeechiness)->commaSeparated(),
                QueryParam::init('target_speechiness', $targetSpeechiness)->commaSeparated(),
                QueryParam::init('min_tempo', $minTempo)->commaSeparated(),
                QueryParam::init('max_tempo', $maxTempo)->commaSeparated(),
                QueryParam::init('target_tempo', $targetTempo)->commaSeparated(),
                QueryParam::init('min_time_signature', $minTimeSignature)->commaSeparated(),
                QueryParam::init('max_time_signature', $maxTimeSignature)->commaSeparated(),
                QueryParam::init('target_time_signature', $targetTimeSignature)->commaSeparated(),
                QueryParam::init('min_valence', $minValence)->commaSeparated(),
                QueryParam::init('max_valence', $maxValence)->commaSeparated(),
                QueryParam::init('target_valence', $targetValence)->commaSeparated()
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    "Bad or expired token. This can happen if the user revoked a token or\nthe " .
                    "access token has expired. You should re-authenticate the user.\n",
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). " .
                    "Unfortunately, re-authenticating the user won't help here.\n",
                    ForbiddenException::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init("The app has exceeded its rate limits.\n", TooManyRequestsException::class)
            )
            ->type(RecommendationsObject::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
