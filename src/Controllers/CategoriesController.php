<?php

declare(strict_types=1);

/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpotifyWebAPILib\Controllers;

use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use SpotifyWebAPILib\Exceptions\ForbiddenException;
use SpotifyWebAPILib\Exceptions\TooManyRequestsException;
use SpotifyWebAPILib\Exceptions\UnauthorizedException;
use SpotifyWebAPILib\Http\ApiResponse;
use SpotifyWebAPILib\Models\CategoryObject;
use SpotifyWebAPILib\Models\PagedCategories;

class CategoriesController extends BaseController
{
    /**
     * Get a list of categories used to tag items in Spotify (on, for example, the Spotify player’s
     * “Browse” tab).
     *
     *
     * @param string|null $locale
     * @param int|null $limit
     * @param int|null $offset
     *
     * @return ApiResponse Response from the API call
     */
    public function getCategories(?string $locale = null, ?int $limit = 20, ?int $offset = 0): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/browse/categories')
            ->auth('oauth_2_0')
            ->parameters(
                QueryParam::init('locale', $locale)->commaSeparated(),
                QueryParam::init('limit', $limit)->commaSeparated(),
                QueryParam::init('offset', $offset)->commaSeparated()
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    "Bad or expired token. This can happen if the user revoked a token or\nthe " .
                    "access token has expired. You should re-authenticate the user.\n",
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). " .
                    "Unfortunately, re-authenticating the user won't help here.\n",
                    ForbiddenException::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init("The app has exceeded its rate limits.\n", TooManyRequestsException::class)
            )
            ->type(PagedCategories::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get a single category used to tag items in Spotify (on, for example, the Spotify player’s “Browse”
     * tab).
     *
     *
     * @param string $categoryId
     * @param string|null $locale
     *
     * @return ApiResponse Response from the API call
     */
    public function getACategory(string $categoryId, ?string $locale = null): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/browse/categories/{category_id}')
            ->auth('oauth_2_0')
            ->parameters(
                TemplateParam::init('category_id', $categoryId),
                QueryParam::init('locale', $locale)->commaSeparated()
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    "Bad or expired token. This can happen if the user revoked a token or\nthe " .
                    "access token has expired. You should re-authenticate the user.\n",
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). " .
                    "Unfortunately, re-authenticating the user won't help here.\n",
                    ForbiddenException::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init("The app has exceeded its rate limits.\n", TooManyRequestsException::class)
            )
            ->type(CategoryObject::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
