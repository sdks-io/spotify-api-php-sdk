<?php

declare(strict_types=1);

/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpotifyWebAPILib\Controllers;

use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use SpotifyWebAPILib\Exceptions\ForbiddenException;
use SpotifyWebAPILib\Exceptions\TooManyRequestsException;
use SpotifyWebAPILib\Exceptions\UnauthorizedException;
use SpotifyWebAPILib\Http\ApiResponse;
use SpotifyWebAPILib\Models\ChapterObject;
use SpotifyWebAPILib\Models\ManyChapters;

class ChaptersController extends BaseController
{
    /**
     * Get Spotify catalog information for a single audiobook chapter. Chapters are only available within
     * the US, UK, Canada, Ireland, New Zealand and Australia markets.
     *
     *
     * @param string $id
     * @param string|null $market
     *
     * @return ApiResponse Response from the API call
     */
    public function getAChapter(string $id, ?string $market = null): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/chapters/{id}')
            ->auth('oauth_2_0')
            ->parameters(TemplateParam::init('id', $id), QueryParam::init('market', $market)->commaSeparated());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    "Bad or expired token. This can happen if the user revoked a token or\nthe " .
                    "access token has expired. You should re-authenticate the user.\n",
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). " .
                    "Unfortunately, re-authenticating the user won't help here.\n",
                    ForbiddenException::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init("The app has exceeded its rate limits.\n", TooManyRequestsException::class)
            )
            ->type(ChapterObject::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get Spotify catalog information for several audiobook chapters identified by their Spotify IDs.
     * Chapters are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets.
     *
     *
     * @param string $ids
     * @param string|null $market
     *
     * @return ApiResponse Response from the API call
     */
    public function getSeveralChapters(string $ids, ?string $market = null): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/chapters')
            ->auth('oauth_2_0')
            ->parameters(
                QueryParam::init('ids', $ids)->commaSeparated(),
                QueryParam::init('market', $market)->commaSeparated()
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    "Bad or expired token. This can happen if the user revoked a token or\nthe " .
                    "access token has expired. You should re-authenticate the user.\n",
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). " .
                    "Unfortunately, re-authenticating the user won't help here.\n",
                    ForbiddenException::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init("The app has exceeded its rate limits.\n", TooManyRequestsException::class)
            )
            ->type(ManyChapters::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
