<?php

declare(strict_types=1);

/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpotifyWebAPILib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use SpotifyWebAPILib\Exceptions\ForbiddenException;
use SpotifyWebAPILib\Exceptions\TooManyRequestsException;
use SpotifyWebAPILib\Exceptions\UnauthorizedException;
use SpotifyWebAPILib\Http\ApiResponse;
use SpotifyWebAPILib\Models\ImageObject;
use SpotifyWebAPILib\Models\PagingFeaturedPlaylistObject;
use SpotifyWebAPILib\Models\PagingPlaylistObject;
use SpotifyWebAPILib\Models\PagingPlaylistTrackObject;
use SpotifyWebAPILib\Models\PlaylistObject;
use SpotifyWebAPILib\Models\PlaylistSnapshotId;
use SpotifyWebAPILib\Models\PlaylistsRequest;
use SpotifyWebAPILib\Models\PlaylistsTracksRequest;
use SpotifyWebAPILib\Models\PlaylistsTracksRequest1;
use SpotifyWebAPILib\Models\PlaylistsTracksRequest2;
use SpotifyWebAPILib\Models\UsersPlaylistsRequest;

class PlaylistsController extends BaseController
{
    /**
     * Get a playlist owned by a Spotify user.
     *
     *
     * @param string $playlistId
     * @param string|null $market
     * @param string|null $fields
     * @param string|null $additionalTypes
     *
     * @return ApiResponse Response from the API call
     */
    public function getPlaylist(
        string $playlistId,
        ?string $market = null,
        ?string $fields = null,
        ?string $additionalTypes = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/playlists/{playlist_id}')
            ->auth('oauth_2_0')
            ->parameters(
                TemplateParam::init('playlist_id', $playlistId),
                QueryParam::init('market', $market)->commaSeparated(),
                QueryParam::init('fields', $fields)->commaSeparated(),
                QueryParam::init('additional_types', $additionalTypes)->commaSeparated()
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    "Bad or expired token. This can happen if the user revoked a token or\nthe " .
                    "access token has expired. You should re-authenticate the user.\n",
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). " .
                    "Unfortunately, re-authenticating the user won't help here.\n",
                    ForbiddenException::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init("The app has exceeded its rate limits.\n", TooManyRequestsException::class)
            )
            ->type(PlaylistObject::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Change a playlist's name and public/private state. (The user must, of
     * course, own the playlist.)
     *
     *
     * @param string $playlistId
     * @param PlaylistsRequest|null $body
     *
     * @return ApiResponse Response from the API call
     */
    public function changePlaylistDetails(string $playlistId, ?PlaylistsRequest $body = null): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/playlists/{playlist_id}')
            ->auth('oauth_2_0')
            ->parameters(
                TemplateParam::init('playlist_id', $playlistId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    "Bad or expired token. This can happen if the user revoked a token or\nthe " .
                    "access token has expired. You should re-authenticate the user.\n",
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). " .
                    "Unfortunately, re-authenticating the user won't help here.\n",
                    ForbiddenException::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init("The app has exceeded its rate limits.\n", TooManyRequestsException::class)
            )
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get full details of the items of a playlist owned by a Spotify user.
     *
     *
     * @param string $playlistId
     * @param string|null $market
     * @param string|null $fields
     * @param int|null $limit
     * @param int|null $offset
     * @param string|null $additionalTypes
     *
     * @return ApiResponse Response from the API call
     */
    public function getPlaylistsTracks(
        string $playlistId,
        ?string $market = null,
        ?string $fields = null,
        ?int $limit = 20,
        ?int $offset = 0,
        ?string $additionalTypes = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/playlists/{playlist_id}/tracks')
            ->auth('oauth_2_0')
            ->parameters(
                TemplateParam::init('playlist_id', $playlistId),
                QueryParam::init('market', $market)->commaSeparated(),
                QueryParam::init('fields', $fields)->commaSeparated(),
                QueryParam::init('limit', $limit)->commaSeparated(),
                QueryParam::init('offset', $offset)->commaSeparated(),
                QueryParam::init('additional_types', $additionalTypes)->commaSeparated()
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    "Bad or expired token. This can happen if the user revoked a token or\nthe " .
                    "access token has expired. You should re-authenticate the user.\n",
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). " .
                    "Unfortunately, re-authenticating the user won't help here.\n",
                    ForbiddenException::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init("The app has exceeded its rate limits.\n", TooManyRequestsException::class)
            )
            ->type(PagingPlaylistTrackObject::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Add one or more items to a user's playlist.
     *
     *
     * @param string $playlistId
     * @param int|null $position
     * @param string|null $uris
     * @param PlaylistsTracksRequest|null $body
     *
     * @return ApiResponse Response from the API call
     */
    public function addTracksToPlaylist(
        string $playlistId,
        ?int $position = null,
        ?string $uris = null,
        ?PlaylistsTracksRequest $body = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/playlists/{playlist_id}/tracks')
            ->auth('oauth_2_0')
            ->parameters(
                TemplateParam::init('playlist_id', $playlistId),
                HeaderParam::init('Content-Type', 'application/json'),
                QueryParam::init('position', $position)->commaSeparated(),
                QueryParam::init('uris', $uris)->commaSeparated(),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    "Bad or expired token. This can happen if the user revoked a token or\nthe " .
                    "access token has expired. You should re-authenticate the user.\n",
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). " .
                    "Unfortunately, re-authenticating the user won't help here.\n",
                    ForbiddenException::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init("The app has exceeded its rate limits.\n", TooManyRequestsException::class)
            )
            ->type(PlaylistSnapshotId::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Either reorder or replace items in a playlist depending on the request's parameters.
     * To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the
     * request's body.
     * To replace items, include `uris` as either a query parameter or in the request's body.
     * Replacing items in a playlist will overwrite its existing items. This operation can be used for
     * replacing or clearing items in a playlist.
     * <br/>
     * **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but
     * have different parameters.
     * These operations can't be applied together in a single request.
     *
     *
     * @param string $playlistId
     * @param string|null $uris
     * @param PlaylistsTracksRequest1|null $body
     *
     * @return ApiResponse Response from the API call
     */
    public function reorderOrReplacePlaylistsTracks(
        string $playlistId,
        ?string $uris = null,
        ?PlaylistsTracksRequest1 $body = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/playlists/{playlist_id}/tracks')
            ->auth('oauth_2_0')
            ->parameters(
                TemplateParam::init('playlist_id', $playlistId),
                HeaderParam::init('Content-Type', 'application/json'),
                QueryParam::init('uris', $uris)->commaSeparated(),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    "Bad or expired token. This can happen if the user revoked a token or\nthe " .
                    "access token has expired. You should re-authenticate the user.\n",
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). " .
                    "Unfortunately, re-authenticating the user won't help here.\n",
                    ForbiddenException::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init("The app has exceeded its rate limits.\n", TooManyRequestsException::class)
            )
            ->type(PlaylistSnapshotId::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Remove one or more items from a user's playlist.
     *
     *
     * @param string $playlistId
     * @param PlaylistsTracksRequest2|null $body
     *
     * @return ApiResponse Response from the API call
     */
    public function removeTracksPlaylist(string $playlistId, ?PlaylistsTracksRequest2 $body = null): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/playlists/{playlist_id}/tracks')
            ->auth('oauth_2_0')
            ->parameters(
                TemplateParam::init('playlist_id', $playlistId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    "Bad or expired token. This can happen if the user revoked a token or\nthe " .
                    "access token has expired. You should re-authenticate the user.\n",
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). " .
                    "Unfortunately, re-authenticating the user won't help here.\n",
                    ForbiddenException::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init("The app has exceeded its rate limits.\n", TooManyRequestsException::class)
            )
            ->type(PlaylistSnapshotId::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get a list of the playlists owned or followed by the current Spotify
     * user.
     *
     *
     * @param int|null $limit
     * @param int|null $offset
     *
     * @return ApiResponse Response from the API call
     */
    public function getAListOfCurrentUsersPlaylists(?int $limit = 20, ?int $offset = 0): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/me/playlists')
            ->auth('oauth_2_0')
            ->parameters(
                QueryParam::init('limit', $limit)->commaSeparated(),
                QueryParam::init('offset', $offset)->commaSeparated()
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    "Bad or expired token. This can happen if the user revoked a token or\nthe " .
                    "access token has expired. You should re-authenticate the user.\n",
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). " .
                    "Unfortunately, re-authenticating the user won't help here.\n",
                    ForbiddenException::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init("The app has exceeded its rate limits.\n", TooManyRequestsException::class)
            )
            ->type(PagingPlaylistObject::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get a list of the playlists owned or followed by a Spotify user.
     *
     *
     * @param string $userId
     * @param int|null $limit
     * @param int|null $offset
     *
     * @return ApiResponse Response from the API call
     */
    public function getListUsersPlaylists(string $userId, ?int $limit = 20, ?int $offset = 0): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/users/{user_id}/playlists')
            ->auth('oauth_2_0')
            ->parameters(
                TemplateParam::init('user_id', $userId),
                QueryParam::init('limit', $limit)->commaSeparated(),
                QueryParam::init('offset', $offset)->commaSeparated()
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    "Bad or expired token. This can happen if the user revoked a token or\nthe " .
                    "access token has expired. You should re-authenticate the user.\n",
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). " .
                    "Unfortunately, re-authenticating the user won't help here.\n",
                    ForbiddenException::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init("The app has exceeded its rate limits.\n", TooManyRequestsException::class)
            )
            ->type(PagingPlaylistObject::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a playlist for a Spotify user. (The playlist will be empty until
     * you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).)
     * Each user is generally limited to a maximum of 11000 playlists.
     *
     *
     * @param string $userId
     * @param UsersPlaylistsRequest|null $body
     *
     * @return ApiResponse Response from the API call
     */
    public function createPlaylist(string $userId, ?UsersPlaylistsRequest $body = null): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/users/{user_id}/playlists')
            ->auth('oauth_2_0')
            ->parameters(
                TemplateParam::init('user_id', $userId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    "Bad or expired token. This can happen if the user revoked a token or\nthe " .
                    "access token has expired. You should re-authenticate the user.\n",
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). " .
                    "Unfortunately, re-authenticating the user won't help here.\n",
                    ForbiddenException::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init("The app has exceeded its rate limits.\n", TooManyRequestsException::class)
            )
            ->type(PlaylistObject::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get a list of Spotify featured playlists (shown, for example, on a Spotify player's 'Browse' tab).
     *
     *
     * @param string|null $locale
     * @param int|null $limit
     * @param int|null $offset
     *
     * @return ApiResponse Response from the API call
     */
    public function getFeaturedPlaylists(?string $locale = null, ?int $limit = 20, ?int $offset = 0): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/browse/featured-playlists')
            ->auth('oauth_2_0')
            ->parameters(
                QueryParam::init('locale', $locale)->commaSeparated(),
                QueryParam::init('limit', $limit)->commaSeparated(),
                QueryParam::init('offset', $offset)->commaSeparated()
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    "Bad or expired token. This can happen if the user revoked a token or\nthe " .
                    "access token has expired. You should re-authenticate the user.\n",
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). " .
                    "Unfortunately, re-authenticating the user won't help here.\n",
                    ForbiddenException::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init("The app has exceeded its rate limits.\n", TooManyRequestsException::class)
            )
            ->type(PagingFeaturedPlaylistObject::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get a list of Spotify playlists tagged with a particular category.
     *
     *
     * @param string $categoryId
     * @param int|null $limit
     * @param int|null $offset
     *
     * @return ApiResponse Response from the API call
     */
    public function getACategoriesPlaylists(string $categoryId, ?int $limit = 20, ?int $offset = 0): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/browse/categories/{category_id}/playlists')
            ->auth('oauth_2_0')
            ->parameters(
                TemplateParam::init('category_id', $categoryId),
                QueryParam::init('limit', $limit)->commaSeparated(),
                QueryParam::init('offset', $offset)->commaSeparated()
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    "Bad or expired token. This can happen if the user revoked a token or\nthe " .
                    "access token has expired. You should re-authenticate the user.\n",
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). " .
                    "Unfortunately, re-authenticating the user won't help here.\n",
                    ForbiddenException::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init("The app has exceeded its rate limits.\n", TooManyRequestsException::class)
            )
            ->type(PagingFeaturedPlaylistObject::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get the current image associated with a specific playlist.
     *
     *
     * @param string $playlistId
     *
     * @return ApiResponse Response from the API call
     */
    public function getPlaylistCover(string $playlistId): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/playlists/{playlist_id}/images')
            ->auth('oauth_2_0')
            ->parameters(TemplateParam::init('playlist_id', $playlistId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    "Bad or expired token. This can happen if the user revoked a token or\nthe " .
                    "access token has expired. You should re-authenticate the user.\n",
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). " .
                    "Unfortunately, re-authenticating the user won't help here.\n",
                    ForbiddenException::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init("The app has exceeded its rate limits.\n", TooManyRequestsException::class)
            )
            ->type(ImageObject::class, 1)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Replace the image used to represent a specific playlist.
     *
     *
     * @param string $playlistId
     * @param array $body
     *
     * @return ApiResponse Response from the API call
     */
    public function uploadCustomPlaylistCover(string $playlistId, array $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/playlists/{playlist_id}/images')
            ->auth('oauth_2_0')
            ->parameters(TemplateParam::init('playlist_id', $playlistId), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    "Bad or expired token. This can happen if the user revoked a token or\nthe " .
                    "access token has expired. You should re-authenticate the user.\n",
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). " .
                    "Unfortunately, re-authenticating the user won't help here.\n",
                    ForbiddenException::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init("The app has exceeded its rate limits.\n", TooManyRequestsException::class)
            )
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
