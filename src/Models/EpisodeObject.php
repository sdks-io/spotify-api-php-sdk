<?php

declare(strict_types=1);

/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpotifyWebAPILib\Models;

use stdClass;

class EpisodeObject implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $audioPreviewUrl;

    /**
     * @var string
     */
    private $description;

    /**
     * @var string
     */
    private $htmlDescription;

    /**
     * @var int
     */
    private $durationMs;

    /**
     * @var bool
     */
    private $explicit;

    /**
     * @var ExternalUrlObject
     */
    private $externalUrls;

    /**
     * @var string
     */
    private $href;

    /**
     * @var string
     */
    private $id;

    /**
     * @var ImageObject[]
     */
    private $images;

    /**
     * @var bool
     */
    private $isExternallyHosted;

    /**
     * @var bool
     */
    private $isPlayable;

    /**
     * @var string|null
     */
    private $language;

    /**
     * @var string[]
     */
    private $languages;

    /**
     * @var string
     */
    private $name;

    /**
     * @var string
     */
    private $releaseDate;

    /**
     * @var string
     */
    private $releaseDatePrecision;

    /**
     * @var ResumePointObject|null
     */
    private $resumePoint;

    /**
     * @var string
     */
    private $type;

    /**
     * @var string
     */
    private $uri;

    /**
     * @var EpisodeRestrictionObject|null
     */
    private $restrictions;

    /**
     * @var ShowBase
     */
    private $show;

    /**
     * @param string $description
     * @param string $htmlDescription
     * @param int $durationMs
     * @param bool $explicit
     * @param ExternalUrlObject $externalUrls
     * @param string $href
     * @param string $id
     * @param ImageObject[] $images
     * @param bool $isExternallyHosted
     * @param bool $isPlayable
     * @param string[] $languages
     * @param string $name
     * @param string $releaseDate
     * @param string $releaseDatePrecision
     * @param string $type
     * @param string $uri
     * @param ShowBase $show
     */
    public function __construct(
        string $description,
        string $htmlDescription,
        int $durationMs,
        bool $explicit,
        ExternalUrlObject $externalUrls,
        string $href,
        string $id,
        array $images,
        bool $isExternallyHosted,
        bool $isPlayable,
        array $languages,
        string $name,
        string $releaseDate,
        string $releaseDatePrecision,
        string $type,
        string $uri,
        ShowBase $show
    ) {
        $this->description = $description;
        $this->htmlDescription = $htmlDescription;
        $this->durationMs = $durationMs;
        $this->explicit = $explicit;
        $this->externalUrls = $externalUrls;
        $this->href = $href;
        $this->id = $id;
        $this->images = $images;
        $this->isExternallyHosted = $isExternallyHosted;
        $this->isPlayable = $isPlayable;
        $this->languages = $languages;
        $this->name = $name;
        $this->releaseDate = $releaseDate;
        $this->releaseDatePrecision = $releaseDatePrecision;
        $this->type = $type;
        $this->uri = $uri;
        $this->show = $show;
    }

    /**
     * Returns Audio Preview Url.
     * A URL to a 30 second preview (MP3 format) of the episode. `null` if not available.
     */
    public function getAudioPreviewUrl(): ?string
    {
        return $this->audioPreviewUrl;
    }

    /**
     * Sets Audio Preview Url.
     * A URL to a 30 second preview (MP3 format) of the episode. `null` if not available.
     *
     * @maps audio_preview_url
     */
    public function setAudioPreviewUrl(?string $audioPreviewUrl): void
    {
        $this->audioPreviewUrl = $audioPreviewUrl;
    }

    /**
     * Returns Description.
     * A description of the episode. HTML tags are stripped away from this field, use `html_description`
     * field in case HTML tags are needed.
     */
    public function getDescription(): string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     * A description of the episode. HTML tags are stripped away from this field, use `html_description`
     * field in case HTML tags are needed.
     *
     * @required
     * @maps description
     */
    public function setDescription(string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Html Description.
     * A description of the episode. This field may contain HTML tags.
     */
    public function getHtmlDescription(): string
    {
        return $this->htmlDescription;
    }

    /**
     * Sets Html Description.
     * A description of the episode. This field may contain HTML tags.
     *
     * @required
     * @maps html_description
     */
    public function setHtmlDescription(string $htmlDescription): void
    {
        $this->htmlDescription = $htmlDescription;
    }

    /**
     * Returns Duration Ms.
     * The episode length in milliseconds.
     */
    public function getDurationMs(): int
    {
        return $this->durationMs;
    }

    /**
     * Sets Duration Ms.
     * The episode length in milliseconds.
     *
     * @required
     * @maps duration_ms
     */
    public function setDurationMs(int $durationMs): void
    {
        $this->durationMs = $durationMs;
    }

    /**
     * Returns Explicit.
     * Whether or not the episode has explicit content (true = yes it does; false = no it does not OR
     * unknown).
     */
    public function getExplicit(): bool
    {
        return $this->explicit;
    }

    /**
     * Sets Explicit.
     * Whether or not the episode has explicit content (true = yes it does; false = no it does not OR
     * unknown).
     *
     * @required
     * @maps explicit
     */
    public function setExplicit(bool $explicit): void
    {
        $this->explicit = $explicit;
    }

    /**
     * Returns External Urls.
     * External URLs for this episode.
     */
    public function getExternalUrls(): ExternalUrlObject
    {
        return $this->externalUrls;
    }

    /**
     * Sets External Urls.
     * External URLs for this episode.
     *
     * @required
     * @maps external_urls
     */
    public function setExternalUrls(ExternalUrlObject $externalUrls): void
    {
        $this->externalUrls = $externalUrls;
    }

    /**
     * Returns Href.
     * A link to the Web API endpoint providing full details of the episode.
     */
    public function getHref(): string
    {
        return $this->href;
    }

    /**
     * Sets Href.
     * A link to the Web API endpoint providing full details of the episode.
     *
     * @required
     * @maps href
     */
    public function setHref(string $href): void
    {
        $this->href = $href;
    }

    /**
     * Returns Id.
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode.
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode.
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Images.
     * The cover art for the episode in various sizes, widest first.
     *
     * @return ImageObject[]
     */
    public function getImages(): array
    {
        return $this->images;
    }

    /**
     * Sets Images.
     * The cover art for the episode in various sizes, widest first.
     *
     * @required
     * @maps images
     *
     * @param ImageObject[] $images
     */
    public function setImages(array $images): void
    {
        $this->images = $images;
    }

    /**
     * Returns Is Externally Hosted.
     * True if the episode is hosted outside of Spotify's CDN.
     */
    public function getIsExternallyHosted(): bool
    {
        return $this->isExternallyHosted;
    }

    /**
     * Sets Is Externally Hosted.
     * True if the episode is hosted outside of Spotify's CDN.
     *
     * @required
     * @maps is_externally_hosted
     */
    public function setIsExternallyHosted(bool $isExternallyHosted): void
    {
        $this->isExternallyHosted = $isExternallyHosted;
    }

    /**
     * Returns Is Playable.
     * True if the episode is playable in the given market. Otherwise false.
     */
    public function getIsPlayable(): bool
    {
        return $this->isPlayable;
    }

    /**
     * Sets Is Playable.
     * True if the episode is playable in the given market. Otherwise false.
     *
     * @required
     * @maps is_playable
     */
    public function setIsPlayable(bool $isPlayable): void
    {
        $this->isPlayable = $isPlayable;
    }

    /**
     * Returns Language.
     * The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639)
     * code. This field is deprecated and might be removed in the future. Please use the `languages` field
     * instead.
     */
    public function getLanguage(): ?string
    {
        return $this->language;
    }

    /**
     * Sets Language.
     * The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639)
     * code. This field is deprecated and might be removed in the future. Please use the `languages` field
     * instead.
     *
     * @maps language
     */
    public function setLanguage(?string $language): void
    {
        $this->language = $language;
    }

    /**
     * Returns Languages.
     * A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.
     * org/wiki/ISO_639) code.
     *
     * @return string[]
     */
    public function getLanguages(): array
    {
        return $this->languages;
    }

    /**
     * Sets Languages.
     * A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.
     * org/wiki/ISO_639) code.
     *
     * @required
     * @maps languages
     *
     * @param string[] $languages
     */
    public function setLanguages(array $languages): void
    {
        $this->languages = $languages;
    }

    /**
     * Returns Name.
     * The name of the episode.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * The name of the episode.
     *
     * @required
     * @maps name
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Release Date.
     * The date the episode was first released, for example `"1981-12-15"`. Depending on the precision, it
     * might be shown as `"1981"` or `"1981-12"`.
     */
    public function getReleaseDate(): string
    {
        return $this->releaseDate;
    }

    /**
     * Sets Release Date.
     * The date the episode was first released, for example `"1981-12-15"`. Depending on the precision, it
     * might be shown as `"1981"` or `"1981-12"`.
     *
     * @required
     * @maps release_date
     */
    public function setReleaseDate(string $releaseDate): void
    {
        $this->releaseDate = $releaseDate;
    }

    /**
     * Returns Release Date Precision.
     * The precision with which `release_date` value is known.
     */
    public function getReleaseDatePrecision(): string
    {
        return $this->releaseDatePrecision;
    }

    /**
     * Sets Release Date Precision.
     * The precision with which `release_date` value is known.
     *
     * @required
     * @maps release_date_precision
     * @factory \SpotifyWebAPILib\Models\ReleaseDatePrecisionEnum::checkValue
     */
    public function setReleaseDatePrecision(string $releaseDatePrecision): void
    {
        $this->releaseDatePrecision = $releaseDatePrecision;
    }

    /**
     * Returns Resume Point.
     * The user's most recent position in the episode. Set if the supplied access token is a user token and
     * has the scope 'user-read-playback-position'.
     */
    public function getResumePoint(): ?ResumePointObject
    {
        return $this->resumePoint;
    }

    /**
     * Sets Resume Point.
     * The user's most recent position in the episode. Set if the supplied access token is a user token and
     * has the scope 'user-read-playback-position'.
     *
     * @maps resume_point
     */
    public function setResumePoint(?ResumePointObject $resumePoint): void
    {
        $this->resumePoint = $resumePoint;
    }

    /**
     * Returns Type.
     * The object type.
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * The object type.
     *
     * @required
     * @maps type
     * @factory \SpotifyWebAPILib\Models\Type8Enum::checkValue
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode.
     */
    public function getUri(): string
    {
        return $this->uri;
    }

    /**
     * Sets Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode.
     *
     * @required
     * @maps uri
     */
    public function setUri(string $uri): void
    {
        $this->uri = $uri;
    }

    /**
     * Returns Restrictions.
     * Included in the response when a content restriction is applied.
     */
    public function getRestrictions(): ?EpisodeRestrictionObject
    {
        return $this->restrictions;
    }

    /**
     * Sets Restrictions.
     * Included in the response when a content restriction is applied.
     *
     * @maps restrictions
     */
    public function setRestrictions(?EpisodeRestrictionObject $restrictions): void
    {
        $this->restrictions = $restrictions;
    }

    /**
     * Returns Show.
     * The show on which the episode belongs.
     */
    public function getShow(): ShowBase
    {
        return $this->show;
    }

    /**
     * Sets Show.
     * The show on which the episode belongs.
     *
     * @required
     * @maps show
     */
    public function setShow(ShowBase $show): void
    {
        $this->show = $show;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['audio_preview_url']      = $this->audioPreviewUrl;
        $json['description']            = $this->description;
        $json['html_description']       = $this->htmlDescription;
        $json['duration_ms']            = $this->durationMs;
        $json['explicit']               = $this->explicit;
        $json['external_urls']          = $this->externalUrls;
        $json['href']                   = $this->href;
        $json['id']                     = $this->id;
        $json['images']                 = $this->images;
        $json['is_externally_hosted']   = $this->isExternallyHosted;
        $json['is_playable']            = $this->isPlayable;
        if (isset($this->language)) {
            $json['language']           = $this->language;
        }
        $json['languages']              = $this->languages;
        $json['name']                   = $this->name;
        $json['release_date']           = $this->releaseDate;
        $json['release_date_precision'] = ReleaseDatePrecisionEnum::checkValue($this->releaseDatePrecision);
        if (isset($this->resumePoint)) {
            $json['resume_point']       = $this->resumePoint;
        }
        $json['type']                   = Type8Enum::checkValue($this->type);
        $json['uri']                    = $this->uri;
        if (isset($this->restrictions)) {
            $json['restrictions']       = $this->restrictions;
        }
        $json['show']                   = $this->show;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
