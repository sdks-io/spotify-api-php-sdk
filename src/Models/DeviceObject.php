<?php

declare(strict_types=1);

/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpotifyWebAPILib\Models;

use stdClass;

class DeviceObject implements \JsonSerializable
{
    /**
     * @var array
     */
    private $id = [];

    /**
     * @var bool|null
     */
    private $isActive;

    /**
     * @var bool|null
     */
    private $isPrivateSession;

    /**
     * @var bool|null
     */
    private $isRestricted;

    /**
     * @var string|null
     */
    private $name;

    /**
     * @var string|null
     */
    private $type;

    /**
     * @var array
     */
    private $volumePercent = [];

    /**
     * @var bool|null
     */
    private $supportsVolume;

    /**
     * Returns Id.
     * The device ID. This ID is unique and persistent to some extent. However, this is not guaranteed and
     * any cached `device_id` should periodically be cleared out and refetched as necessary.
     */
    public function getId(): ?string
    {
        if (count($this->id) == 0) {
            return null;
        }
        return $this->id['value'];
    }

    /**
     * Sets Id.
     * The device ID. This ID is unique and persistent to some extent. However, this is not guaranteed and
     * any cached `device_id` should periodically be cleared out and refetched as necessary.
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id['value'] = $id;
    }

    /**
     * Unsets Id.
     * The device ID. This ID is unique and persistent to some extent. However, this is not guaranteed and
     * any cached `device_id` should periodically be cleared out and refetched as necessary.
     */
    public function unsetId(): void
    {
        $this->id = [];
    }

    /**
     * Returns Is Active.
     * If this device is the currently active device.
     */
    public function getIsActive(): ?bool
    {
        return $this->isActive;
    }

    /**
     * Sets Is Active.
     * If this device is the currently active device.
     *
     * @maps is_active
     */
    public function setIsActive(?bool $isActive): void
    {
        $this->isActive = $isActive;
    }

    /**
     * Returns Is Private Session.
     * If this device is currently in a private session.
     */
    public function getIsPrivateSession(): ?bool
    {
        return $this->isPrivateSession;
    }

    /**
     * Sets Is Private Session.
     * If this device is currently in a private session.
     *
     * @maps is_private_session
     */
    public function setIsPrivateSession(?bool $isPrivateSession): void
    {
        $this->isPrivateSession = $isPrivateSession;
    }

    /**
     * Returns Is Restricted.
     * Whether controlling this device is restricted. At present if this is "true" then no Web API commands
     * will be accepted by this device.
     */
    public function getIsRestricted(): ?bool
    {
        return $this->isRestricted;
    }

    /**
     * Sets Is Restricted.
     * Whether controlling this device is restricted. At present if this is "true" then no Web API commands
     * will be accepted by this device.
     *
     * @maps is_restricted
     */
    public function setIsRestricted(?bool $isRestricted): void
    {
        $this->isRestricted = $isRestricted;
    }

    /**
     * Returns Name.
     * A human-readable name for the device. Some devices have a name that the user can configure (e.g.
     * \"Loudest speaker\") and some devices have a generic name associated with the manufacturer or device
     * model.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * A human-readable name for the device. Some devices have a name that the user can configure (e.g.
     * \"Loudest speaker\") and some devices have a generic name associated with the manufacturer or device
     * model.
     *
     * @maps name
     */
    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Type.
     * Device type, such as "computer", "smartphone" or "speaker".
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * Device type, such as "computer", "smartphone" or "speaker".
     *
     * @maps type
     */
    public function setType(?string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Volume Percent.
     * The current volume in percent.
     */
    public function getVolumePercent(): ?int
    {
        if (count($this->volumePercent) == 0) {
            return null;
        }
        return $this->volumePercent['value'];
    }

    /**
     * Sets Volume Percent.
     * The current volume in percent.
     *
     * @maps volume_percent
     */
    public function setVolumePercent(?int $volumePercent): void
    {
        $this->volumePercent['value'] = $volumePercent;
    }

    /**
     * Unsets Volume Percent.
     * The current volume in percent.
     */
    public function unsetVolumePercent(): void
    {
        $this->volumePercent = [];
    }

    /**
     * Returns Supports Volume.
     * If this device can be used to set the volume.
     */
    public function getSupportsVolume(): ?bool
    {
        return $this->supportsVolume;
    }

    /**
     * Sets Supports Volume.
     * If this device can be used to set the volume.
     *
     * @maps supports_volume
     */
    public function setSupportsVolume(?bool $supportsVolume): void
    {
        $this->supportsVolume = $supportsVolume;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->id)) {
            $json['id']                 = $this->id['value'];
        }
        if (isset($this->isActive)) {
            $json['is_active']          = $this->isActive;
        }
        if (isset($this->isPrivateSession)) {
            $json['is_private_session'] = $this->isPrivateSession;
        }
        if (isset($this->isRestricted)) {
            $json['is_restricted']      = $this->isRestricted;
        }
        if (isset($this->name)) {
            $json['name']               = $this->name;
        }
        if (isset($this->type)) {
            $json['type']               = $this->type;
        }
        if (!empty($this->volumePercent)) {
            $json['volume_percent']     = $this->volumePercent['value'];
        }
        if (isset($this->supportsVolume)) {
            $json['supports_volume']    = $this->supportsVolume;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
