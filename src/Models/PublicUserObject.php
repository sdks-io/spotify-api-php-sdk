<?php

declare(strict_types=1);

/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpotifyWebAPILib\Models;

use stdClass;

class PublicUserObject implements \JsonSerializable
{
    /**
     * @var array
     */
    private $displayName = [];

    /**
     * @var ExternalUrlObject|null
     */
    private $externalUrls;

    /**
     * @var FollowersObject|null
     */
    private $followers;

    /**
     * @var string|null
     */
    private $href;

    /**
     * @var string|null
     */
    private $id;

    /**
     * @var ImageObject[]|null
     */
    private $images;

    /**
     * @var string|null
     */
    private $type;

    /**
     * @var string|null
     */
    private $uri;

    /**
     * Returns Display Name.
     * The name displayed on the user's profile. `null` if not available.
     */
    public function getDisplayName(): ?string
    {
        if (count($this->displayName) == 0) {
            return null;
        }
        return $this->displayName['value'];
    }

    /**
     * Sets Display Name.
     * The name displayed on the user's profile. `null` if not available.
     *
     * @maps display_name
     */
    public function setDisplayName(?string $displayName): void
    {
        $this->displayName['value'] = $displayName;
    }

    /**
     * Unsets Display Name.
     * The name displayed on the user's profile. `null` if not available.
     */
    public function unsetDisplayName(): void
    {
        $this->displayName = [];
    }

    /**
     * Returns External Urls.
     * Known public external URLs for this user.
     */
    public function getExternalUrls(): ?ExternalUrlObject
    {
        return $this->externalUrls;
    }

    /**
     * Sets External Urls.
     * Known public external URLs for this user.
     *
     * @maps external_urls
     */
    public function setExternalUrls(?ExternalUrlObject $externalUrls): void
    {
        $this->externalUrls = $externalUrls;
    }

    /**
     * Returns Followers.
     * Information about the followers of this user.
     */
    public function getFollowers(): ?FollowersObject
    {
        return $this->followers;
    }

    /**
     * Sets Followers.
     * Information about the followers of this user.
     *
     * @maps followers
     */
    public function setFollowers(?FollowersObject $followers): void
    {
        $this->followers = $followers;
    }

    /**
     * Returns Href.
     * A link to the Web API endpoint for this user.
     */
    public function getHref(): ?string
    {
        return $this->href;
    }

    /**
     * Sets Href.
     * A link to the Web API endpoint for this user.
     *
     * @maps href
     */
    public function setHref(?string $href): void
    {
        $this->href = $href;
    }

    /**
     * Returns Id.
     * The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user.
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user.
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Images.
     * The user's profile image.
     *
     * @return ImageObject[]|null
     */
    public function getImages(): ?array
    {
        return $this->images;
    }

    /**
     * Sets Images.
     * The user's profile image.
     *
     * @maps images
     *
     * @param ImageObject[]|null $images
     */
    public function setImages(?array $images): void
    {
        $this->images = $images;
    }

    /**
     * Returns Type.
     * The object type.
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * The object type.
     *
     * @maps type
     * @factory \SpotifyWebAPILib\Models\Type4Enum::checkValue
     */
    public function setType(?string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user.
     */
    public function getUri(): ?string
    {
        return $this->uri;
    }

    /**
     * Sets Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user.
     *
     * @maps uri
     */
    public function setUri(?string $uri): void
    {
        $this->uri = $uri;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->displayName)) {
            $json['display_name']  = $this->displayName['value'];
        }
        if (isset($this->externalUrls)) {
            $json['external_urls'] = $this->externalUrls;
        }
        if (isset($this->followers)) {
            $json['followers']     = $this->followers;
        }
        if (isset($this->href)) {
            $json['href']          = $this->href;
        }
        if (isset($this->id)) {
            $json['id']            = $this->id;
        }
        if (isset($this->images)) {
            $json['images']        = $this->images;
        }
        if (isset($this->type)) {
            $json['type']          = Type4Enum::checkValue($this->type);
        }
        if (isset($this->uri)) {
            $json['uri']           = $this->uri;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
