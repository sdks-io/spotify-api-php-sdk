<?php

declare(strict_types=1);

/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpotifyWebAPILib\Models;

use stdClass;

class ShowObject implements \JsonSerializable
{
    /**
     * @var string[]
     */
    private $availableMarkets;

    /**
     * @var CopyrightObject[]
     */
    private $copyrights;

    /**
     * @var string
     */
    private $description;

    /**
     * @var string
     */
    private $htmlDescription;

    /**
     * @var bool
     */
    private $explicit;

    /**
     * @var ExternalUrlObject
     */
    private $externalUrls;

    /**
     * @var string
     */
    private $href;

    /**
     * @var string
     */
    private $id;

    /**
     * @var ImageObject[]
     */
    private $images;

    /**
     * @var bool
     */
    private $isExternallyHosted;

    /**
     * @var string[]
     */
    private $languages;

    /**
     * @var string
     */
    private $mediaType;

    /**
     * @var string
     */
    private $name;

    /**
     * @var string
     */
    private $publisher;

    /**
     * @var string
     */
    private $type;

    /**
     * @var string
     */
    private $uri;

    /**
     * @var int
     */
    private $totalEpisodes;

    /**
     * @var PagingSimplifiedEpisodeObject
     */
    private $episodes;

    /**
     * @param string[] $availableMarkets
     * @param CopyrightObject[] $copyrights
     * @param string $description
     * @param string $htmlDescription
     * @param bool $explicit
     * @param ExternalUrlObject $externalUrls
     * @param string $href
     * @param string $id
     * @param ImageObject[] $images
     * @param bool $isExternallyHosted
     * @param string[] $languages
     * @param string $mediaType
     * @param string $name
     * @param string $publisher
     * @param string $type
     * @param string $uri
     * @param int $totalEpisodes
     * @param PagingSimplifiedEpisodeObject $episodes
     */
    public function __construct(
        array $availableMarkets,
        array $copyrights,
        string $description,
        string $htmlDescription,
        bool $explicit,
        ExternalUrlObject $externalUrls,
        string $href,
        string $id,
        array $images,
        bool $isExternallyHosted,
        array $languages,
        string $mediaType,
        string $name,
        string $publisher,
        string $type,
        string $uri,
        int $totalEpisodes,
        PagingSimplifiedEpisodeObject $episodes
    ) {
        $this->availableMarkets = $availableMarkets;
        $this->copyrights = $copyrights;
        $this->description = $description;
        $this->htmlDescription = $htmlDescription;
        $this->explicit = $explicit;
        $this->externalUrls = $externalUrls;
        $this->href = $href;
        $this->id = $id;
        $this->images = $images;
        $this->isExternallyHosted = $isExternallyHosted;
        $this->languages = $languages;
        $this->mediaType = $mediaType;
        $this->name = $name;
        $this->publisher = $publisher;
        $this->type = $type;
        $this->uri = $uri;
        $this->totalEpisodes = $totalEpisodes;
        $this->episodes = $episodes;
    }

    /**
     * Returns Available Markets.
     * A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-
     * 2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
     *
     * @return string[]
     */
    public function getAvailableMarkets(): array
    {
        return $this->availableMarkets;
    }

    /**
     * Sets Available Markets.
     * A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-
     * 2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
     *
     * @required
     * @maps available_markets
     *
     * @param string[] $availableMarkets
     */
    public function setAvailableMarkets(array $availableMarkets): void
    {
        $this->availableMarkets = $availableMarkets;
    }

    /**
     * Returns Copyrights.
     * The copyright statements of the show.
     *
     * @return CopyrightObject[]
     */
    public function getCopyrights(): array
    {
        return $this->copyrights;
    }

    /**
     * Sets Copyrights.
     * The copyright statements of the show.
     *
     * @required
     * @maps copyrights
     *
     * @param CopyrightObject[] $copyrights
     */
    public function setCopyrights(array $copyrights): void
    {
        $this->copyrights = $copyrights;
    }

    /**
     * Returns Description.
     * A description of the show. HTML tags are stripped away from this field, use `html_description` field
     * in case HTML tags are needed.
     */
    public function getDescription(): string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     * A description of the show. HTML tags are stripped away from this field, use `html_description` field
     * in case HTML tags are needed.
     *
     * @required
     * @maps description
     */
    public function setDescription(string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Html Description.
     * A description of the show. This field may contain HTML tags.
     */
    public function getHtmlDescription(): string
    {
        return $this->htmlDescription;
    }

    /**
     * Sets Html Description.
     * A description of the show. This field may contain HTML tags.
     *
     * @required
     * @maps html_description
     */
    public function setHtmlDescription(string $htmlDescription): void
    {
        $this->htmlDescription = $htmlDescription;
    }

    /**
     * Returns Explicit.
     * Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown).
     */
    public function getExplicit(): bool
    {
        return $this->explicit;
    }

    /**
     * Sets Explicit.
     * Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown).
     *
     * @required
     * @maps explicit
     */
    public function setExplicit(bool $explicit): void
    {
        $this->explicit = $explicit;
    }

    /**
     * Returns External Urls.
     * External URLs for this show.
     */
    public function getExternalUrls(): ExternalUrlObject
    {
        return $this->externalUrls;
    }

    /**
     * Sets External Urls.
     * External URLs for this show.
     *
     * @required
     * @maps external_urls
     */
    public function setExternalUrls(ExternalUrlObject $externalUrls): void
    {
        $this->externalUrls = $externalUrls;
    }

    /**
     * Returns Href.
     * A link to the Web API endpoint providing full details of the show.
     */
    public function getHref(): string
    {
        return $this->href;
    }

    /**
     * Sets Href.
     * A link to the Web API endpoint providing full details of the show.
     *
     * @required
     * @maps href
     */
    public function setHref(string $href): void
    {
        $this->href = $href;
    }

    /**
     * Returns Id.
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show.
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show.
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Images.
     * The cover art for the show in various sizes, widest first.
     *
     * @return ImageObject[]
     */
    public function getImages(): array
    {
        return $this->images;
    }

    /**
     * Sets Images.
     * The cover art for the show in various sizes, widest first.
     *
     * @required
     * @maps images
     *
     * @param ImageObject[] $images
     */
    public function setImages(array $images): void
    {
        $this->images = $images;
    }

    /**
     * Returns Is Externally Hosted.
     * True if all of the shows episodes are hosted outside of Spotify's CDN. This field might be `null` in
     * some cases.
     */
    public function getIsExternallyHosted(): bool
    {
        return $this->isExternallyHosted;
    }

    /**
     * Sets Is Externally Hosted.
     * True if all of the shows episodes are hosted outside of Spotify's CDN. This field might be `null` in
     * some cases.
     *
     * @required
     * @maps is_externally_hosted
     */
    public function setIsExternallyHosted(bool $isExternallyHosted): void
    {
        $this->isExternallyHosted = $isExternallyHosted;
    }

    /**
     * Returns Languages.
     * A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.
     * org/wiki/ISO_639) code.
     *
     * @return string[]
     */
    public function getLanguages(): array
    {
        return $this->languages;
    }

    /**
     * Sets Languages.
     * A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.
     * org/wiki/ISO_639) code.
     *
     * @required
     * @maps languages
     *
     * @param string[] $languages
     */
    public function setLanguages(array $languages): void
    {
        $this->languages = $languages;
    }

    /**
     * Returns Media Type.
     * The media type of the show.
     */
    public function getMediaType(): string
    {
        return $this->mediaType;
    }

    /**
     * Sets Media Type.
     * The media type of the show.
     *
     * @required
     * @maps media_type
     */
    public function setMediaType(string $mediaType): void
    {
        $this->mediaType = $mediaType;
    }

    /**
     * Returns Name.
     * The name of the episode.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * The name of the episode.
     *
     * @required
     * @maps name
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Publisher.
     * The publisher of the show.
     */
    public function getPublisher(): string
    {
        return $this->publisher;
    }

    /**
     * Sets Publisher.
     * The publisher of the show.
     *
     * @required
     * @maps publisher
     */
    public function setPublisher(string $publisher): void
    {
        $this->publisher = $publisher;
    }

    /**
     * Returns Type.
     * The object type.
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * The object type.
     *
     * @required
     * @maps type
     * @factory \SpotifyWebAPILib\Models\Type7Enum::checkValue
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show.
     */
    public function getUri(): string
    {
        return $this->uri;
    }

    /**
     * Sets Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show.
     *
     * @required
     * @maps uri
     */
    public function setUri(string $uri): void
    {
        $this->uri = $uri;
    }

    /**
     * Returns Total Episodes.
     * The total number of episodes in the show.
     */
    public function getTotalEpisodes(): int
    {
        return $this->totalEpisodes;
    }

    /**
     * Sets Total Episodes.
     * The total number of episodes in the show.
     *
     * @required
     * @maps total_episodes
     */
    public function setTotalEpisodes(int $totalEpisodes): void
    {
        $this->totalEpisodes = $totalEpisodes;
    }

    /**
     * Returns Episodes.
     * The episodes of the show.
     */
    public function getEpisodes(): PagingSimplifiedEpisodeObject
    {
        return $this->episodes;
    }

    /**
     * Sets Episodes.
     * The episodes of the show.
     *
     * @required
     * @maps episodes
     */
    public function setEpisodes(PagingSimplifiedEpisodeObject $episodes): void
    {
        $this->episodes = $episodes;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['available_markets']    = $this->availableMarkets;
        $json['copyrights']           = $this->copyrights;
        $json['description']          = $this->description;
        $json['html_description']     = $this->htmlDescription;
        $json['explicit']             = $this->explicit;
        $json['external_urls']        = $this->externalUrls;
        $json['href']                 = $this->href;
        $json['id']                   = $this->id;
        $json['images']               = $this->images;
        $json['is_externally_hosted'] = $this->isExternallyHosted;
        $json['languages']            = $this->languages;
        $json['media_type']           = $this->mediaType;
        $json['name']                 = $this->name;
        $json['publisher']            = $this->publisher;
        $json['type']                 = Type7Enum::checkValue($this->type);
        $json['uri']                  = $this->uri;
        $json['total_episodes']       = $this->totalEpisodes;
        $json['episodes']             = $this->episodes;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
