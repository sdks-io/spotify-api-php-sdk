<?php

declare(strict_types=1);

/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpotifyWebAPILib\Models;

use stdClass;

class SimplifiedTrackObject implements \JsonSerializable
{
    /**
     * @var SimplifiedArtistObject[]|null
     */
    private $artists;

    /**
     * @var string[]|null
     */
    private $availableMarkets;

    /**
     * @var int|null
     */
    private $discNumber;

    /**
     * @var int|null
     */
    private $durationMs;

    /**
     * @var bool|null
     */
    private $explicit;

    /**
     * @var ExternalUrlObject|null
     */
    private $externalUrls;

    /**
     * @var string|null
     */
    private $href;

    /**
     * @var string|null
     */
    private $id;

    /**
     * @var bool|null
     */
    private $isPlayable;

    /**
     * @var LinkedTrackObject|null
     */
    private $linkedFrom;

    /**
     * @var TrackRestrictionObject|null
     */
    private $restrictions;

    /**
     * @var string|null
     */
    private $name;

    /**
     * @var array
     */
    private $previewUrl = [];

    /**
     * @var int|null
     */
    private $trackNumber;

    /**
     * @var string|null
     */
    private $type;

    /**
     * @var string|null
     */
    private $uri;

    /**
     * @var bool|null
     */
    private $isLocal;

    /**
     * Returns Artists.
     * The artists who performed the track. Each artist object includes a link in `href` to more detailed
     * information about the artist.
     *
     * @return SimplifiedArtistObject[]|null
     */
    public function getArtists(): ?array
    {
        return $this->artists;
    }

    /**
     * Sets Artists.
     * The artists who performed the track. Each artist object includes a link in `href` to more detailed
     * information about the artist.
     *
     * @maps artists
     *
     * @param SimplifiedArtistObject[]|null $artists
     */
    public function setArtists(?array $artists): void
    {
        $this->artists = $artists;
    }

    /**
     * Returns Available Markets.
     * A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-
     * 2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
     *
     * @return string[]|null
     */
    public function getAvailableMarkets(): ?array
    {
        return $this->availableMarkets;
    }

    /**
     * Sets Available Markets.
     * A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-
     * 2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
     *
     * @maps available_markets
     *
     * @param string[]|null $availableMarkets
     */
    public function setAvailableMarkets(?array $availableMarkets): void
    {
        $this->availableMarkets = $availableMarkets;
    }

    /**
     * Returns Disc Number.
     * The disc number (usually `1` unless the album consists of more than one disc).
     */
    public function getDiscNumber(): ?int
    {
        return $this->discNumber;
    }

    /**
     * Sets Disc Number.
     * The disc number (usually `1` unless the album consists of more than one disc).
     *
     * @maps disc_number
     */
    public function setDiscNumber(?int $discNumber): void
    {
        $this->discNumber = $discNumber;
    }

    /**
     * Returns Duration Ms.
     * The track length in milliseconds.
     */
    public function getDurationMs(): ?int
    {
        return $this->durationMs;
    }

    /**
     * Sets Duration Ms.
     * The track length in milliseconds.
     *
     * @maps duration_ms
     */
    public function setDurationMs(?int $durationMs): void
    {
        $this->durationMs = $durationMs;
    }

    /**
     * Returns Explicit.
     * Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR
     * unknown).
     */
    public function getExplicit(): ?bool
    {
        return $this->explicit;
    }

    /**
     * Sets Explicit.
     * Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR
     * unknown).
     *
     * @maps explicit
     */
    public function setExplicit(?bool $explicit): void
    {
        $this->explicit = $explicit;
    }

    /**
     * Returns External Urls.
     * External URLs for this track.
     */
    public function getExternalUrls(): ?ExternalUrlObject
    {
        return $this->externalUrls;
    }

    /**
     * Sets External Urls.
     * External URLs for this track.
     *
     * @maps external_urls
     */
    public function setExternalUrls(?ExternalUrlObject $externalUrls): void
    {
        $this->externalUrls = $externalUrls;
    }

    /**
     * Returns Href.
     * A link to the Web API endpoint providing full details of the track.
     */
    public function getHref(): ?string
    {
        return $this->href;
    }

    /**
     * Sets Href.
     * A link to the Web API endpoint providing full details of the track.
     *
     * @maps href
     */
    public function setHref(?string $href): void
    {
        $this->href = $href;
    }

    /**
     * Returns Id.
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Is Playable.
     * Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is
     * applied. If `true`, the track is playable in the given market. Otherwise `false`.
     */
    public function getIsPlayable(): ?bool
    {
        return $this->isPlayable;
    }

    /**
     * Sets Is Playable.
     * Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is
     * applied. If `true`, the track is playable in the given market. Otherwise `false`.
     *
     * @maps is_playable
     */
    public function setIsPlayable(?bool $isPlayable): void
    {
        $this->isPlayable = $isPlayable;
    }

    /**
     * Returns Linked From.
     * Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is
     * applied and is only part of the response if the track linking, in fact, exists. The requested track
     * has been replaced with a different track. The track in the `linked_from` object contains information
     * about the originally requested track.
     */
    public function getLinkedFrom(): ?LinkedTrackObject
    {
        return $this->linkedFrom;
    }

    /**
     * Sets Linked From.
     * Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is
     * applied and is only part of the response if the track linking, in fact, exists. The requested track
     * has been replaced with a different track. The track in the `linked_from` object contains information
     * about the originally requested track.
     *
     * @maps linked_from
     */
    public function setLinkedFrom(?LinkedTrackObject $linkedFrom): void
    {
        $this->linkedFrom = $linkedFrom;
    }

    /**
     * Returns Restrictions.
     * Included in the response when a content restriction is applied.
     */
    public function getRestrictions(): ?TrackRestrictionObject
    {
        return $this->restrictions;
    }

    /**
     * Sets Restrictions.
     * Included in the response when a content restriction is applied.
     *
     * @maps restrictions
     */
    public function setRestrictions(?TrackRestrictionObject $restrictions): void
    {
        $this->restrictions = $restrictions;
    }

    /**
     * Returns Name.
     * The name of the track.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * The name of the track.
     *
     * @maps name
     */
    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Preview Url.
     * A URL to a 30 second preview (MP3 format) of the track.
     */
    public function getPreviewUrl(): ?string
    {
        if (count($this->previewUrl) == 0) {
            return null;
        }
        return $this->previewUrl['value'];
    }

    /**
     * Sets Preview Url.
     * A URL to a 30 second preview (MP3 format) of the track.
     *
     * @maps preview_url
     */
    public function setPreviewUrl(?string $previewUrl): void
    {
        $this->previewUrl['value'] = $previewUrl;
    }

    /**
     * Unsets Preview Url.
     * A URL to a 30 second preview (MP3 format) of the track.
     */
    public function unsetPreviewUrl(): void
    {
        $this->previewUrl = [];
    }

    /**
     * Returns Track Number.
     * The number of the track. If an album has several discs, the track number is the number on the
     * specified disc.
     */
    public function getTrackNumber(): ?int
    {
        return $this->trackNumber;
    }

    /**
     * Sets Track Number.
     * The number of the track. If an album has several discs, the track number is the number on the
     * specified disc.
     *
     * @maps track_number
     */
    public function setTrackNumber(?int $trackNumber): void
    {
        $this->trackNumber = $trackNumber;
    }

    /**
     * Returns Type.
     * The object type: "track".
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * The object type: "track".
     *
     * @maps type
     */
    public function setType(?string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.
     */
    public function getUri(): ?string
    {
        return $this->uri;
    }

    /**
     * Sets Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.
     *
     * @maps uri
     */
    public function setUri(?string $uri): void
    {
        $this->uri = $uri;
    }

    /**
     * Returns Is Local.
     * Whether or not the track is from a local file.
     */
    public function getIsLocal(): ?bool
    {
        return $this->isLocal;
    }

    /**
     * Sets Is Local.
     * Whether or not the track is from a local file.
     *
     * @maps is_local
     */
    public function setIsLocal(?bool $isLocal): void
    {
        $this->isLocal = $isLocal;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->artists)) {
            $json['artists']           = $this->artists;
        }
        if (isset($this->availableMarkets)) {
            $json['available_markets'] = $this->availableMarkets;
        }
        if (isset($this->discNumber)) {
            $json['disc_number']       = $this->discNumber;
        }
        if (isset($this->durationMs)) {
            $json['duration_ms']       = $this->durationMs;
        }
        if (isset($this->explicit)) {
            $json['explicit']          = $this->explicit;
        }
        if (isset($this->externalUrls)) {
            $json['external_urls']     = $this->externalUrls;
        }
        if (isset($this->href)) {
            $json['href']              = $this->href;
        }
        if (isset($this->id)) {
            $json['id']                = $this->id;
        }
        if (isset($this->isPlayable)) {
            $json['is_playable']       = $this->isPlayable;
        }
        if (isset($this->linkedFrom)) {
            $json['linked_from']       = $this->linkedFrom;
        }
        if (isset($this->restrictions)) {
            $json['restrictions']      = $this->restrictions;
        }
        if (isset($this->name)) {
            $json['name']              = $this->name;
        }
        if (!empty($this->previewUrl)) {
            $json['preview_url']       = $this->previewUrl['value'];
        }
        if (isset($this->trackNumber)) {
            $json['track_number']      = $this->trackNumber;
        }
        if (isset($this->type)) {
            $json['type']              = $this->type;
        }
        if (isset($this->uri)) {
            $json['uri']               = $this->uri;
        }
        if (isset($this->isLocal)) {
            $json['is_local']          = $this->isLocal;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
