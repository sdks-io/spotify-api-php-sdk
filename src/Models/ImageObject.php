<?php

declare(strict_types=1);

/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpotifyWebAPILib\Models;

use stdClass;

class ImageObject implements \JsonSerializable
{
    /**
     * @var string
     */
    private $url;

    /**
     * @var int|null
     */
    private $height;

    /**
     * @var int|null
     */
    private $width;

    /**
     * @param string $url
     */
    public function __construct(string $url)
    {
        $this->url = $url;
    }

    /**
     * Returns Url.
     * The source URL of the image.
     */
    public function getUrl(): string
    {
        return $this->url;
    }

    /**
     * Sets Url.
     * The source URL of the image.
     *
     * @required
     * @maps url
     */
    public function setUrl(string $url): void
    {
        $this->url = $url;
    }

    /**
     * Returns Height.
     * The image height in pixels.
     */
    public function getHeight(): ?int
    {
        return $this->height;
    }

    /**
     * Sets Height.
     * The image height in pixels.
     *
     * @maps height
     */
    public function setHeight(?int $height): void
    {
        $this->height = $height;
    }

    /**
     * Returns Width.
     * The image width in pixels.
     */
    public function getWidth(): ?int
    {
        return $this->width;
    }

    /**
     * Sets Width.
     * The image width in pixels.
     *
     * @maps width
     */
    public function setWidth(?int $width): void
    {
        $this->width = $width;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['url']    = $this->url;
        $json['height'] = $this->height;
        $json['width']  = $this->width;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
