<?php

declare(strict_types=1);

/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpotifyWebAPILib\Models\Builders;

use Core\Utils\CoreHelper;
use SpotifyWebAPILib\Models\Meta;

/**
 * Builder for model Meta
 *
 * @see Meta
 */
class MetaBuilder
{
    /**
     * @var Meta
     */
    private $instance;

    private function __construct(Meta $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new meta Builder object.
     */
    public static function init(): self
    {
        return new self(new Meta());
    }

    /**
     * Sets analyzer version field.
     */
    public function analyzerVersion(?string $value): self
    {
        $this->instance->setAnalyzerVersion($value);
        return $this;
    }

    /**
     * Sets platform field.
     */
    public function platform(?string $value): self
    {
        $this->instance->setPlatform($value);
        return $this;
    }

    /**
     * Sets detailed status field.
     */
    public function detailedStatus(?string $value): self
    {
        $this->instance->setDetailedStatus($value);
        return $this;
    }

    /**
     * Sets status code field.
     */
    public function statusCode(?int $value): self
    {
        $this->instance->setStatusCode($value);
        return $this;
    }

    /**
     * Sets timestamp field.
     */
    public function timestamp(?int $value): self
    {
        $this->instance->setTimestamp($value);
        return $this;
    }

    /**
     * Sets analysis time field.
     */
    public function analysisTime(?float $value): self
    {
        $this->instance->setAnalysisTime($value);
        return $this;
    }

    /**
     * Sets input process field.
     */
    public function inputProcess(?string $value): self
    {
        $this->instance->setInputProcess($value);
        return $this;
    }

    /**
     * Initializes a new meta object.
     */
    public function build(): Meta
    {
        return CoreHelper::clone($this->instance);
    }
}
