<?php

declare(strict_types=1);

/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpotifyWebAPILib\Models\Builders;

use Core\Utils\CoreHelper;
use SpotifyWebAPILib\Models\ExternalUrlObject;
use SpotifyWebAPILib\Models\LinkedTrackObject;
use SpotifyWebAPILib\Models\SimplifiedTrackObject;
use SpotifyWebAPILib\Models\TrackRestrictionObject;

/**
 * Builder for model SimplifiedTrackObject
 *
 * @see SimplifiedTrackObject
 */
class SimplifiedTrackObjectBuilder
{
    /**
     * @var SimplifiedTrackObject
     */
    private $instance;

    private function __construct(SimplifiedTrackObject $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new simplified track object Builder object.
     */
    public static function init(): self
    {
        return new self(new SimplifiedTrackObject());
    }

    /**
     * Sets artists field.
     */
    public function artists(?array $value): self
    {
        $this->instance->setArtists($value);
        return $this;
    }

    /**
     * Sets available markets field.
     */
    public function availableMarkets(?array $value): self
    {
        $this->instance->setAvailableMarkets($value);
        return $this;
    }

    /**
     * Sets disc number field.
     */
    public function discNumber(?int $value): self
    {
        $this->instance->setDiscNumber($value);
        return $this;
    }

    /**
     * Sets duration ms field.
     */
    public function durationMs(?int $value): self
    {
        $this->instance->setDurationMs($value);
        return $this;
    }

    /**
     * Sets explicit field.
     */
    public function explicit(?bool $value): self
    {
        $this->instance->setExplicit($value);
        return $this;
    }

    /**
     * Sets external urls field.
     */
    public function externalUrls(?ExternalUrlObject $value): self
    {
        $this->instance->setExternalUrls($value);
        return $this;
    }

    /**
     * Sets href field.
     */
    public function href(?string $value): self
    {
        $this->instance->setHref($value);
        return $this;
    }

    /**
     * Sets id field.
     */
    public function id(?string $value): self
    {
        $this->instance->setId($value);
        return $this;
    }

    /**
     * Sets is playable field.
     */
    public function isPlayable(?bool $value): self
    {
        $this->instance->setIsPlayable($value);
        return $this;
    }

    /**
     * Sets linked from field.
     */
    public function linkedFrom(?LinkedTrackObject $value): self
    {
        $this->instance->setLinkedFrom($value);
        return $this;
    }

    /**
     * Sets restrictions field.
     */
    public function restrictions(?TrackRestrictionObject $value): self
    {
        $this->instance->setRestrictions($value);
        return $this;
    }

    /**
     * Sets name field.
     */
    public function name(?string $value): self
    {
        $this->instance->setName($value);
        return $this;
    }

    /**
     * Sets preview url field.
     */
    public function previewUrl(?string $value): self
    {
        $this->instance->setPreviewUrl($value);
        return $this;
    }

    /**
     * Unsets preview url field.
     */
    public function unsetPreviewUrl(): self
    {
        $this->instance->unsetPreviewUrl();
        return $this;
    }

    /**
     * Sets track number field.
     */
    public function trackNumber(?int $value): self
    {
        $this->instance->setTrackNumber($value);
        return $this;
    }

    /**
     * Sets type field.
     */
    public function type(?string $value): self
    {
        $this->instance->setType($value);
        return $this;
    }

    /**
     * Sets uri field.
     */
    public function uri(?string $value): self
    {
        $this->instance->setUri($value);
        return $this;
    }

    /**
     * Sets is local field.
     */
    public function isLocal(?bool $value): self
    {
        $this->instance->setIsLocal($value);
        return $this;
    }

    /**
     * Initializes a new simplified track object object.
     */
    public function build(): SimplifiedTrackObject
    {
        return CoreHelper::clone($this->instance);
    }
}
