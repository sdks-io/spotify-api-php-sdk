<?php

declare(strict_types=1);

/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpotifyWebAPILib\Models;

use stdClass;

class ErrorObject implements \JsonSerializable
{
    /**
     * @var int
     */
    private $status;

    /**
     * @var string
     */
    private $message;

    /**
     * @param int $status
     * @param string $message
     */
    public function __construct(int $status, string $message)
    {
        $this->status = $status;
        $this->message = $message;
    }

    /**
     * Returns Status.
     * The HTTP status code (also returned in the response header; see [Response Status
     * Codes](/documentation/web-api/concepts/api-calls#response-status-codes) for more information).
     */
    public function getStatus(): int
    {
        return $this->status;
    }

    /**
     * Sets Status.
     * The HTTP status code (also returned in the response header; see [Response Status
     * Codes](/documentation/web-api/concepts/api-calls#response-status-codes) for more information).
     *
     * @required
     * @maps status
     */
    public function setStatus(int $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Message.
     * A short description of the cause of the error.
     */
    public function getMessage(): string
    {
        return $this->message;
    }

    /**
     * Sets Message.
     * A short description of the cause of the error.
     *
     * @required
     * @maps message
     */
    public function setMessage(string $message): void
    {
        $this->message = $message;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['status']  = $this->status;
        $json['message'] = $this->message;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
