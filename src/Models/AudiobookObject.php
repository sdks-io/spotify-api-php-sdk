<?php

declare(strict_types=1);

/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpotifyWebAPILib\Models;

use stdClass;

class AudiobookObject implements \JsonSerializable
{
    /**
     * @var AuthorObject[]
     */
    private $authors;

    /**
     * @var string[]
     */
    private $availableMarkets;

    /**
     * @var CopyrightObject[]
     */
    private $copyrights;

    /**
     * @var string
     */
    private $description;

    /**
     * @var string
     */
    private $htmlDescription;

    /**
     * @var string|null
     */
    private $edition;

    /**
     * @var bool
     */
    private $explicit;

    /**
     * @var ExternalUrlObject
     */
    private $externalUrls;

    /**
     * @var string
     */
    private $href;

    /**
     * @var string
     */
    private $id;

    /**
     * @var ImageObject[]
     */
    private $images;

    /**
     * @var string[]
     */
    private $languages;

    /**
     * @var string
     */
    private $mediaType;

    /**
     * @var string
     */
    private $name;

    /**
     * @var NarratorObject[]
     */
    private $narrators;

    /**
     * @var string
     */
    private $publisher;

    /**
     * @var string
     */
    private $type;

    /**
     * @var string
     */
    private $uri;

    /**
     * @var int
     */
    private $totalChapters;

    /**
     * @var PagingSimplifiedChapterObject
     */
    private $chapters;

    /**
     * @param AuthorObject[] $authors
     * @param string[] $availableMarkets
     * @param CopyrightObject[] $copyrights
     * @param string $description
     * @param string $htmlDescription
     * @param bool $explicit
     * @param ExternalUrlObject $externalUrls
     * @param string $href
     * @param string $id
     * @param ImageObject[] $images
     * @param string[] $languages
     * @param string $mediaType
     * @param string $name
     * @param NarratorObject[] $narrators
     * @param string $publisher
     * @param string $type
     * @param string $uri
     * @param int $totalChapters
     * @param PagingSimplifiedChapterObject $chapters
     */
    public function __construct(
        array $authors,
        array $availableMarkets,
        array $copyrights,
        string $description,
        string $htmlDescription,
        bool $explicit,
        ExternalUrlObject $externalUrls,
        string $href,
        string $id,
        array $images,
        array $languages,
        string $mediaType,
        string $name,
        array $narrators,
        string $publisher,
        string $type,
        string $uri,
        int $totalChapters,
        PagingSimplifiedChapterObject $chapters
    ) {
        $this->authors = $authors;
        $this->availableMarkets = $availableMarkets;
        $this->copyrights = $copyrights;
        $this->description = $description;
        $this->htmlDescription = $htmlDescription;
        $this->explicit = $explicit;
        $this->externalUrls = $externalUrls;
        $this->href = $href;
        $this->id = $id;
        $this->images = $images;
        $this->languages = $languages;
        $this->mediaType = $mediaType;
        $this->name = $name;
        $this->narrators = $narrators;
        $this->publisher = $publisher;
        $this->type = $type;
        $this->uri = $uri;
        $this->totalChapters = $totalChapters;
        $this->chapters = $chapters;
    }

    /**
     * Returns Authors.
     * The author(s) for the audiobook.
     *
     * @return AuthorObject[]
     */
    public function getAuthors(): array
    {
        return $this->authors;
    }

    /**
     * Sets Authors.
     * The author(s) for the audiobook.
     *
     * @required
     * @maps authors
     *
     * @param AuthorObject[] $authors
     */
    public function setAuthors(array $authors): void
    {
        $this->authors = $authors;
    }

    /**
     * Returns Available Markets.
     * A list of the countries in which the audiobook can be played, identified by their [ISO 3166-1 alpha-
     * 2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
     *
     * @return string[]
     */
    public function getAvailableMarkets(): array
    {
        return $this->availableMarkets;
    }

    /**
     * Sets Available Markets.
     * A list of the countries in which the audiobook can be played, identified by their [ISO 3166-1 alpha-
     * 2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
     *
     * @required
     * @maps available_markets
     *
     * @param string[] $availableMarkets
     */
    public function setAvailableMarkets(array $availableMarkets): void
    {
        $this->availableMarkets = $availableMarkets;
    }

    /**
     * Returns Copyrights.
     * The copyright statements of the audiobook.
     *
     * @return CopyrightObject[]
     */
    public function getCopyrights(): array
    {
        return $this->copyrights;
    }

    /**
     * Sets Copyrights.
     * The copyright statements of the audiobook.
     *
     * @required
     * @maps copyrights
     *
     * @param CopyrightObject[] $copyrights
     */
    public function setCopyrights(array $copyrights): void
    {
        $this->copyrights = $copyrights;
    }

    /**
     * Returns Description.
     * A description of the audiobook. HTML tags are stripped away from this field, use `html_description`
     * field in case HTML tags are needed.
     */
    public function getDescription(): string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     * A description of the audiobook. HTML tags are stripped away from this field, use `html_description`
     * field in case HTML tags are needed.
     *
     * @required
     * @maps description
     */
    public function setDescription(string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Html Description.
     * A description of the audiobook. This field may contain HTML tags.
     */
    public function getHtmlDescription(): string
    {
        return $this->htmlDescription;
    }

    /**
     * Sets Html Description.
     * A description of the audiobook. This field may contain HTML tags.
     *
     * @required
     * @maps html_description
     */
    public function setHtmlDescription(string $htmlDescription): void
    {
        $this->htmlDescription = $htmlDescription;
    }

    /**
     * Returns Edition.
     * The edition of the audiobook.
     */
    public function getEdition(): ?string
    {
        return $this->edition;
    }

    /**
     * Sets Edition.
     * The edition of the audiobook.
     *
     * @maps edition
     */
    public function setEdition(?string $edition): void
    {
        $this->edition = $edition;
    }

    /**
     * Returns Explicit.
     * Whether or not the audiobook has explicit content (true = yes it does; false = no it does not OR
     * unknown).
     */
    public function getExplicit(): bool
    {
        return $this->explicit;
    }

    /**
     * Sets Explicit.
     * Whether or not the audiobook has explicit content (true = yes it does; false = no it does not OR
     * unknown).
     *
     * @required
     * @maps explicit
     */
    public function setExplicit(bool $explicit): void
    {
        $this->explicit = $explicit;
    }

    /**
     * Returns External Urls.
     * External URLs for this audiobook.
     */
    public function getExternalUrls(): ExternalUrlObject
    {
        return $this->externalUrls;
    }

    /**
     * Sets External Urls.
     * External URLs for this audiobook.
     *
     * @required
     * @maps external_urls
     */
    public function setExternalUrls(ExternalUrlObject $externalUrls): void
    {
        $this->externalUrls = $externalUrls;
    }

    /**
     * Returns Href.
     * A link to the Web API endpoint providing full details of the audiobook.
     */
    public function getHref(): string
    {
        return $this->href;
    }

    /**
     * Sets Href.
     * A link to the Web API endpoint providing full details of the audiobook.
     *
     * @required
     * @maps href
     */
    public function setHref(string $href): void
    {
        $this->href = $href;
    }

    /**
     * Returns Id.
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook.
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook.
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Images.
     * The cover art for the audiobook in various sizes, widest first.
     *
     * @return ImageObject[]
     */
    public function getImages(): array
    {
        return $this->images;
    }

    /**
     * Sets Images.
     * The cover art for the audiobook in various sizes, widest first.
     *
     * @required
     * @maps images
     *
     * @param ImageObject[] $images
     */
    public function setImages(array $images): void
    {
        $this->images = $images;
    }

    /**
     * Returns Languages.
     * A list of the languages used in the audiobook, identified by their [ISO 639](https://en.wikipedia.
     * org/wiki/ISO_639) code.
     *
     * @return string[]
     */
    public function getLanguages(): array
    {
        return $this->languages;
    }

    /**
     * Sets Languages.
     * A list of the languages used in the audiobook, identified by their [ISO 639](https://en.wikipedia.
     * org/wiki/ISO_639) code.
     *
     * @required
     * @maps languages
     *
     * @param string[] $languages
     */
    public function setLanguages(array $languages): void
    {
        $this->languages = $languages;
    }

    /**
     * Returns Media Type.
     * The media type of the audiobook.
     */
    public function getMediaType(): string
    {
        return $this->mediaType;
    }

    /**
     * Sets Media Type.
     * The media type of the audiobook.
     *
     * @required
     * @maps media_type
     */
    public function setMediaType(string $mediaType): void
    {
        $this->mediaType = $mediaType;
    }

    /**
     * Returns Name.
     * The name of the audiobook.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * The name of the audiobook.
     *
     * @required
     * @maps name
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Narrators.
     * The narrator(s) for the audiobook.
     *
     * @return NarratorObject[]
     */
    public function getNarrators(): array
    {
        return $this->narrators;
    }

    /**
     * Sets Narrators.
     * The narrator(s) for the audiobook.
     *
     * @required
     * @maps narrators
     *
     * @param NarratorObject[] $narrators
     */
    public function setNarrators(array $narrators): void
    {
        $this->narrators = $narrators;
    }

    /**
     * Returns Publisher.
     * The publisher of the audiobook.
     */
    public function getPublisher(): string
    {
        return $this->publisher;
    }

    /**
     * Sets Publisher.
     * The publisher of the audiobook.
     *
     * @required
     * @maps publisher
     */
    public function setPublisher(string $publisher): void
    {
        $this->publisher = $publisher;
    }

    /**
     * Returns Type.
     * The object type.
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * The object type.
     *
     * @required
     * @maps type
     * @factory \SpotifyWebAPILib\Models\Type9Enum::checkValue
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook.
     */
    public function getUri(): string
    {
        return $this->uri;
    }

    /**
     * Sets Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook.
     *
     * @required
     * @maps uri
     */
    public function setUri(string $uri): void
    {
        $this->uri = $uri;
    }

    /**
     * Returns Total Chapters.
     * The number of chapters in this audiobook.
     */
    public function getTotalChapters(): int
    {
        return $this->totalChapters;
    }

    /**
     * Sets Total Chapters.
     * The number of chapters in this audiobook.
     *
     * @required
     * @maps total_chapters
     */
    public function setTotalChapters(int $totalChapters): void
    {
        $this->totalChapters = $totalChapters;
    }

    /**
     * Returns Chapters.
     * The chapters of the audiobook.
     */
    public function getChapters(): PagingSimplifiedChapterObject
    {
        return $this->chapters;
    }

    /**
     * Sets Chapters.
     * The chapters of the audiobook.
     *
     * @required
     * @maps chapters
     */
    public function setChapters(PagingSimplifiedChapterObject $chapters): void
    {
        $this->chapters = $chapters;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['authors']           = $this->authors;
        $json['available_markets'] = $this->availableMarkets;
        $json['copyrights']        = $this->copyrights;
        $json['description']       = $this->description;
        $json['html_description']  = $this->htmlDescription;
        if (isset($this->edition)) {
            $json['edition']       = $this->edition;
        }
        $json['explicit']          = $this->explicit;
        $json['external_urls']     = $this->externalUrls;
        $json['href']              = $this->href;
        $json['id']                = $this->id;
        $json['images']            = $this->images;
        $json['languages']         = $this->languages;
        $json['media_type']        = $this->mediaType;
        $json['name']              = $this->name;
        $json['narrators']         = $this->narrators;
        $json['publisher']         = $this->publisher;
        $json['type']              = Type9Enum::checkValue($this->type);
        $json['uri']               = $this->uri;
        $json['total_chapters']    = $this->totalChapters;
        $json['chapters']          = $this->chapters;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
