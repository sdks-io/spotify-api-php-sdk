<?php

declare(strict_types=1);

/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpotifyWebAPILib\Models;

use stdClass;

class PlaylistObject implements \JsonSerializable
{
    /**
     * @var bool|null
     */
    private $collaborative;

    /**
     * @var array
     */
    private $description = [];

    /**
     * @var ExternalUrlObject|null
     */
    private $externalUrls;

    /**
     * @var FollowersObject|null
     */
    private $followers;

    /**
     * @var string|null
     */
    private $href;

    /**
     * @var string|null
     */
    private $id;

    /**
     * @var ImageObject[]|null
     */
    private $images;

    /**
     * @var string|null
     */
    private $name;

    /**
     * @var PlaylistOwnerObject|null
     */
    private $owner;

    /**
     * @var bool|null
     */
    private $public;

    /**
     * @var string|null
     */
    private $snapshotId;

    /**
     * @var PagingPlaylistTrackObject|null
     */
    private $tracks;

    /**
     * @var string|null
     */
    private $type;

    /**
     * @var string|null
     */
    private $uri;

    /**
     * Returns Collaborative.
     * `true` if the owner allows other users to modify the playlist.
     */
    public function getCollaborative(): ?bool
    {
        return $this->collaborative;
    }

    /**
     * Sets Collaborative.
     * `true` if the owner allows other users to modify the playlist.
     *
     * @maps collaborative
     */
    public function setCollaborative(?bool $collaborative): void
    {
        $this->collaborative = $collaborative;
    }

    /**
     * Returns Description.
     * The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`.
     */
    public function getDescription(): ?string
    {
        if (count($this->description) == 0) {
            return null;
        }
        return $this->description['value'];
    }

    /**
     * Sets Description.
     * The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`.
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description['value'] = $description;
    }

    /**
     * Unsets Description.
     * The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`.
     */
    public function unsetDescription(): void
    {
        $this->description = [];
    }

    /**
     * Returns External Urls.
     * Known external URLs for this playlist.
     */
    public function getExternalUrls(): ?ExternalUrlObject
    {
        return $this->externalUrls;
    }

    /**
     * Sets External Urls.
     * Known external URLs for this playlist.
     *
     * @maps external_urls
     */
    public function setExternalUrls(?ExternalUrlObject $externalUrls): void
    {
        $this->externalUrls = $externalUrls;
    }

    /**
     * Returns Followers.
     * Information about the followers of the playlist.
     */
    public function getFollowers(): ?FollowersObject
    {
        return $this->followers;
    }

    /**
     * Sets Followers.
     * Information about the followers of the playlist.
     *
     * @maps followers
     */
    public function setFollowers(?FollowersObject $followers): void
    {
        $this->followers = $followers;
    }

    /**
     * Returns Href.
     * A link to the Web API endpoint providing full details of the playlist.
     */
    public function getHref(): ?string
    {
        return $this->href;
    }

    /**
     * Sets Href.
     * A link to the Web API endpoint providing full details of the playlist.
     *
     * @maps href
     */
    public function setHref(?string $href): void
    {
        $this->href = $href;
    }

    /**
     * Returns Id.
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Images.
     * Images for the playlist. The array may be empty or contain up to three images. The images are
     * returned by size in descending order. See [Working with Playlists](/documentation/web-
     * api/concepts/playlists). _**Note**: If returned, the source URL for the image (`url`) is temporary
     * and will expire in less than a day._
     *
     * @return ImageObject[]|null
     */
    public function getImages(): ?array
    {
        return $this->images;
    }

    /**
     * Sets Images.
     * Images for the playlist. The array may be empty or contain up to three images. The images are
     * returned by size in descending order. See [Working with Playlists](/documentation/web-
     * api/concepts/playlists). _**Note**: If returned, the source URL for the image (`url`) is temporary
     * and will expire in less than a day._
     *
     * @maps images
     *
     * @param ImageObject[]|null $images
     */
    public function setImages(?array $images): void
    {
        $this->images = $images;
    }

    /**
     * Returns Name.
     * The name of the playlist.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * The name of the playlist.
     *
     * @maps name
     */
    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Owner.
     * The user who owns the playlist
     */
    public function getOwner(): ?PlaylistOwnerObject
    {
        return $this->owner;
    }

    /**
     * Sets Owner.
     * The user who owns the playlist
     *
     * @maps owner
     */
    public function setOwner(?PlaylistOwnerObject $owner): void
    {
        $this->owner = $owner;
    }

    /**
     * Returns Public.
     * The playlist's public/private status: `true` the playlist is public, `false` the playlist is private,
     * `null` the playlist status is not relevant. For more about public/private status, see [Working with
     * Playlists](/documentation/web-api/concepts/playlists)
     */
    public function getPublic(): ?bool
    {
        return $this->public;
    }

    /**
     * Sets Public.
     * The playlist's public/private status: `true` the playlist is public, `false` the playlist is private,
     * `null` the playlist status is not relevant. For more about public/private status, see [Working with
     * Playlists](/documentation/web-api/concepts/playlists)
     *
     * @maps public
     */
    public function setPublic(?bool $public): void
    {
        $this->public = $public;
    }

    /**
     * Returns Snapshot Id.
     * The version identifier for the current playlist. Can be supplied in other requests to target a
     * specific playlist version
     */
    public function getSnapshotId(): ?string
    {
        return $this->snapshotId;
    }

    /**
     * Sets Snapshot Id.
     * The version identifier for the current playlist. Can be supplied in other requests to target a
     * specific playlist version
     *
     * @maps snapshot_id
     */
    public function setSnapshotId(?string $snapshotId): void
    {
        $this->snapshotId = $snapshotId;
    }

    /**
     * Returns Tracks.
     * The tracks of the playlist.
     */
    public function getTracks(): ?PagingPlaylistTrackObject
    {
        return $this->tracks;
    }

    /**
     * Sets Tracks.
     * The tracks of the playlist.
     *
     * @maps tracks
     */
    public function setTracks(?PagingPlaylistTrackObject $tracks): void
    {
        $this->tracks = $tracks;
    }

    /**
     * Returns Type.
     * The object type: "playlist"
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * The object type: "playlist"
     *
     * @maps type
     */
    public function setType(?string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.
     */
    public function getUri(): ?string
    {
        return $this->uri;
    }

    /**
     * Sets Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.
     *
     * @maps uri
     */
    public function setUri(?string $uri): void
    {
        $this->uri = $uri;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->collaborative)) {
            $json['collaborative'] = $this->collaborative;
        }
        if (!empty($this->description)) {
            $json['description']   = $this->description['value'];
        }
        if (isset($this->externalUrls)) {
            $json['external_urls'] = $this->externalUrls;
        }
        if (isset($this->followers)) {
            $json['followers']     = $this->followers;
        }
        if (isset($this->href)) {
            $json['href']          = $this->href;
        }
        if (isset($this->id)) {
            $json['id']            = $this->id;
        }
        if (isset($this->images)) {
            $json['images']        = $this->images;
        }
        if (isset($this->name)) {
            $json['name']          = $this->name;
        }
        if (isset($this->owner)) {
            $json['owner']         = $this->owner;
        }
        if (isset($this->public)) {
            $json['public']        = $this->public;
        }
        if (isset($this->snapshotId)) {
            $json['snapshot_id']   = $this->snapshotId;
        }
        if (isset($this->tracks)) {
            $json['tracks']        = $this->tracks;
        }
        if (isset($this->type)) {
            $json['type']          = $this->type;
        }
        if (isset($this->uri)) {
            $json['uri']           = $this->uri;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
