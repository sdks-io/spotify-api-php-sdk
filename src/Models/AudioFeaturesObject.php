<?php

declare(strict_types=1);

/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpotifyWebAPILib\Models;

use stdClass;

class AudioFeaturesObject implements \JsonSerializable
{
    /**
     * @var float|null
     */
    private $acousticness;

    /**
     * @var string|null
     */
    private $analysisUrl;

    /**
     * @var float|null
     */
    private $danceability;

    /**
     * @var int|null
     */
    private $durationMs;

    /**
     * @var float|null
     */
    private $energy;

    /**
     * @var string|null
     */
    private $id;

    /**
     * @var float|null
     */
    private $instrumentalness;

    /**
     * @var int|null
     */
    private $key;

    /**
     * @var float|null
     */
    private $liveness;

    /**
     * @var float|null
     */
    private $loudness;

    /**
     * @var int|null
     */
    private $mode;

    /**
     * @var float|null
     */
    private $speechiness;

    /**
     * @var float|null
     */
    private $tempo;

    /**
     * @var int|null
     */
    private $timeSignature;

    /**
     * @var string|null
     */
    private $trackHref;

    /**
     * @var string|null
     */
    private $type;

    /**
     * @var string|null
     */
    private $uri;

    /**
     * @var float|null
     */
    private $valence;

    /**
     * Returns Acousticness.
     * A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high
     * confidence the track is acoustic.
     */
    public function getAcousticness(): ?float
    {
        return $this->acousticness;
    }

    /**
     * Sets Acousticness.
     * A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high
     * confidence the track is acoustic.
     *
     * @maps acousticness
     */
    public function setAcousticness(?float $acousticness): void
    {
        $this->acousticness = $acousticness;
    }

    /**
     * Returns Analysis Url.
     * A URL to access the full audio analysis of this track. An access token is required to access this
     * data.
     */
    public function getAnalysisUrl(): ?string
    {
        return $this->analysisUrl;
    }

    /**
     * Sets Analysis Url.
     * A URL to access the full audio analysis of this track. An access token is required to access this
     * data.
     *
     * @maps analysis_url
     */
    public function setAnalysisUrl(?string $analysisUrl): void
    {
        $this->analysisUrl = $analysisUrl;
    }

    /**
     * Returns Danceability.
     * Danceability describes how suitable a track is for dancing based on a combination of musical
     * elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is
     * least danceable and 1.0 is most danceable.
     */
    public function getDanceability(): ?float
    {
        return $this->danceability;
    }

    /**
     * Sets Danceability.
     * Danceability describes how suitable a track is for dancing based on a combination of musical
     * elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is
     * least danceable and 1.0 is most danceable.
     *
     * @maps danceability
     */
    public function setDanceability(?float $danceability): void
    {
        $this->danceability = $danceability;
    }

    /**
     * Returns Duration Ms.
     * The duration of the track in milliseconds.
     */
    public function getDurationMs(): ?int
    {
        return $this->durationMs;
    }

    /**
     * Sets Duration Ms.
     * The duration of the track in milliseconds.
     *
     * @maps duration_ms
     */
    public function setDurationMs(?int $durationMs): void
    {
        $this->durationMs = $durationMs;
    }

    /**
     * Returns Energy.
     * Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity.
     * Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy,
     * while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute
     * include dynamic range, perceived loudness, timbre, onset rate, and general entropy.
     */
    public function getEnergy(): ?float
    {
        return $this->energy;
    }

    /**
     * Sets Energy.
     * Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity.
     * Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy,
     * while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute
     * include dynamic range, perceived loudness, timbre, onset rate, and general entropy.
     *
     * @maps energy
     */
    public function setEnergy(?float $energy): void
    {
        $this->energy = $energy;
    }

    /**
     * Returns Id.
     * The Spotify ID for the track.
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * The Spotify ID for the track.
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Instrumentalness.
     * Predicts whether a track contains no vocals. "Ooh" and "aah" sounds are treated as instrumental in
     * this context. Rap or spoken word tracks are clearly "vocal". The closer the instrumentalness value
     * is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended
     * to represent instrumental tracks, but confidence is higher as the value approaches 1.0.
     */
    public function getInstrumentalness(): ?float
    {
        return $this->instrumentalness;
    }

    /**
     * Sets Instrumentalness.
     * Predicts whether a track contains no vocals. "Ooh" and "aah" sounds are treated as instrumental in
     * this context. Rap or spoken word tracks are clearly "vocal". The closer the instrumentalness value
     * is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended
     * to represent instrumental tracks, but confidence is higher as the value approaches 1.0.
     *
     * @maps instrumentalness
     */
    public function setInstrumentalness(?float $instrumentalness): void
    {
        $this->instrumentalness = $instrumentalness;
    }

    /**
     * Returns Key.
     * The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.
     * wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected,
     * the value is -1.
     */
    public function getKey(): ?int
    {
        return $this->key;
    }

    /**
     * Sets Key.
     * The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.
     * wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected,
     * the value is -1.
     *
     * @maps key
     */
    public function setKey(?int $key): void
    {
        $this->key = $key;
    }

    /**
     * Returns Liveness.
     * Detects the presence of an audience in the recording. Higher liveness values represent an increased
     * probability that the track was performed live. A value above 0.8 provides strong likelihood that the
     * track is live.
     */
    public function getLiveness(): ?float
    {
        return $this->liveness;
    }

    /**
     * Sets Liveness.
     * Detects the presence of an audience in the recording. Higher liveness values represent an increased
     * probability that the track was performed live. A value above 0.8 provides strong likelihood that the
     * track is live.
     *
     * @maps liveness
     */
    public function setLiveness(?float $liveness): void
    {
        $this->liveness = $liveness;
    }

    /**
     * Returns Loudness.
     * The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire
     * track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound
     * that is the primary psychological correlate of physical strength (amplitude). Values typically range
     * between -60 and 0 db.
     */
    public function getLoudness(): ?float
    {
        return $this->loudness;
    }

    /**
     * Sets Loudness.
     * The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire
     * track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound
     * that is the primary psychological correlate of physical strength (amplitude). Values typically range
     * between -60 and 0 db.
     *
     * @maps loudness
     */
    public function setLoudness(?float $loudness): void
    {
        $this->loudness = $loudness;
    }

    /**
     * Returns Mode.
     * Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic
     * content is derived. Major is represented by 1 and minor is 0.
     */
    public function getMode(): ?int
    {
        return $this->mode;
    }

    /**
     * Sets Mode.
     * Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic
     * content is derived. Major is represented by 1 and minor is 0.
     *
     * @maps mode
     */
    public function setMode(?int $mode): void
    {
        $this->mode = $mode;
    }

    /**
     * Returns Speechiness.
     * Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the
     * recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above
     * 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66
     * describe tracks that may contain both music and speech, either in sections or layered, including
     * such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like
     * tracks.
     */
    public function getSpeechiness(): ?float
    {
        return $this->speechiness;
    }

    /**
     * Sets Speechiness.
     * Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the
     * recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above
     * 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66
     * describe tracks that may contain both music and speech, either in sections or layered, including
     * such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like
     * tracks.
     *
     * @maps speechiness
     */
    public function setSpeechiness(?float $speechiness): void
    {
        $this->speechiness = $speechiness;
    }

    /**
     * Returns Tempo.
     * The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is
     * the speed or pace of a given piece and derives directly from the average beat duration.
     */
    public function getTempo(): ?float
    {
        return $this->tempo;
    }

    /**
     * Sets Tempo.
     * The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is
     * the speed or pace of a given piece and derives directly from the average beat duration.
     *
     * @maps tempo
     */
    public function setTempo(?float $tempo): void
    {
        $this->tempo = $tempo;
    }

    /**
     * Returns Time Signature.
     * An estimated time signature. The time signature (meter) is a notational convention to specify how
     * many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time
     * signatures of "3/4", to "7/4".
     */
    public function getTimeSignature(): ?int
    {
        return $this->timeSignature;
    }

    /**
     * Sets Time Signature.
     * An estimated time signature. The time signature (meter) is a notational convention to specify how
     * many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time
     * signatures of "3/4", to "7/4".
     *
     * @maps time_signature
     */
    public function setTimeSignature(?int $timeSignature): void
    {
        $this->timeSignature = $timeSignature;
    }

    /**
     * Returns Track Href.
     * A link to the Web API endpoint providing full details of the track.
     */
    public function getTrackHref(): ?string
    {
        return $this->trackHref;
    }

    /**
     * Sets Track Href.
     * A link to the Web API endpoint providing full details of the track.
     *
     * @maps track_href
     */
    public function setTrackHref(?string $trackHref): void
    {
        $this->trackHref = $trackHref;
    }

    /**
     * Returns Type.
     * The object type.
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * The object type.
     *
     * @maps type
     * @factory \SpotifyWebAPILib\Models\Type6Enum::checkValue
     */
    public function setType(?string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Uri.
     * The Spotify URI for the track.
     */
    public function getUri(): ?string
    {
        return $this->uri;
    }

    /**
     * Sets Uri.
     * The Spotify URI for the track.
     *
     * @maps uri
     */
    public function setUri(?string $uri): void
    {
        $this->uri = $uri;
    }

    /**
     * Returns Valence.
     * A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high
     * valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound
     * more negative (e.g. sad, depressed, angry).
     */
    public function getValence(): ?float
    {
        return $this->valence;
    }

    /**
     * Sets Valence.
     * A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high
     * valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound
     * more negative (e.g. sad, depressed, angry).
     *
     * @maps valence
     */
    public function setValence(?float $valence): void
    {
        $this->valence = $valence;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->acousticness)) {
            $json['acousticness']     = $this->acousticness;
        }
        if (isset($this->analysisUrl)) {
            $json['analysis_url']     = $this->analysisUrl;
        }
        if (isset($this->danceability)) {
            $json['danceability']     = $this->danceability;
        }
        if (isset($this->durationMs)) {
            $json['duration_ms']      = $this->durationMs;
        }
        if (isset($this->energy)) {
            $json['energy']           = $this->energy;
        }
        if (isset($this->id)) {
            $json['id']               = $this->id;
        }
        if (isset($this->instrumentalness)) {
            $json['instrumentalness'] = $this->instrumentalness;
        }
        if (isset($this->key)) {
            $json['key']              = $this->key;
        }
        if (isset($this->liveness)) {
            $json['liveness']         = $this->liveness;
        }
        if (isset($this->loudness)) {
            $json['loudness']         = $this->loudness;
        }
        if (isset($this->mode)) {
            $json['mode']             = $this->mode;
        }
        if (isset($this->speechiness)) {
            $json['speechiness']      = $this->speechiness;
        }
        if (isset($this->tempo)) {
            $json['tempo']            = $this->tempo;
        }
        if (isset($this->timeSignature)) {
            $json['time_signature']   = $this->timeSignature;
        }
        if (isset($this->trackHref)) {
            $json['track_href']       = $this->trackHref;
        }
        if (isset($this->type)) {
            $json['type']             = Type6Enum::checkValue($this->type);
        }
        if (isset($this->uri)) {
            $json['uri']              = $this->uri;
        }
        if (isset($this->valence)) {
            $json['valence']          = $this->valence;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
