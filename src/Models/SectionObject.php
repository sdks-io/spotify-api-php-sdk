<?php

declare(strict_types=1);

/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpotifyWebAPILib\Models;

use stdClass;

class SectionObject implements \JsonSerializable
{
    /**
     * @var float|null
     */
    private $start;

    /**
     * @var float|null
     */
    private $duration;

    /**
     * @var float|null
     */
    private $confidence;

    /**
     * @var float|null
     */
    private $loudness;

    /**
     * @var float|null
     */
    private $tempo;

    /**
     * @var float|null
     */
    private $tempoConfidence;

    /**
     * @var int|null
     */
    private $key;

    /**
     * @var float|null
     */
    private $keyConfidence;

    /**
     * @var int|null
     */
    private $mode;

    /**
     * @var float|null
     */
    private $modeConfidence;

    /**
     * @var int|null
     */
    private $timeSignature;

    /**
     * @var float|null
     */
    private $timeSignatureConfidence;

    /**
     * Returns Start.
     * The starting point (in seconds) of the section.
     */
    public function getStart(): ?float
    {
        return $this->start;
    }

    /**
     * Sets Start.
     * The starting point (in seconds) of the section.
     *
     * @maps start
     */
    public function setStart(?float $start): void
    {
        $this->start = $start;
    }

    /**
     * Returns Duration.
     * The duration (in seconds) of the section.
     */
    public function getDuration(): ?float
    {
        return $this->duration;
    }

    /**
     * Sets Duration.
     * The duration (in seconds) of the section.
     *
     * @maps duration
     */
    public function setDuration(?float $duration): void
    {
        $this->duration = $duration;
    }

    /**
     * Returns Confidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the section's "designation".
     */
    public function getConfidence(): ?float
    {
        return $this->confidence;
    }

    /**
     * Sets Confidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the section's "designation".
     *
     * @maps confidence
     */
    public function setConfidence(?float $confidence): void
    {
        $this->confidence = $confidence;
    }

    /**
     * Returns Loudness.
     * The overall loudness of the section in decibels (dB). Loudness values are useful for comparing
     * relative loudness of sections within tracks.
     */
    public function getLoudness(): ?float
    {
        return $this->loudness;
    }

    /**
     * Sets Loudness.
     * The overall loudness of the section in decibels (dB). Loudness values are useful for comparing
     * relative loudness of sections within tracks.
     *
     * @maps loudness
     */
    public function setLoudness(?float $loudness): void
    {
        $this->loudness = $loudness;
    }

    /**
     * Returns Tempo.
     * The overall estimated tempo of the section in beats per minute (BPM). In musical terminology, tempo
     * is the speed or pace of a given piece and derives directly from the average beat duration.
     */
    public function getTempo(): ?float
    {
        return $this->tempo;
    }

    /**
     * Sets Tempo.
     * The overall estimated tempo of the section in beats per minute (BPM). In musical terminology, tempo
     * is the speed or pace of a given piece and derives directly from the average beat duration.
     *
     * @maps tempo
     */
    public function setTempo(?float $tempo): void
    {
        $this->tempo = $tempo;
    }

    /**
     * Returns Tempo Confidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the tempo. Some tracks contain tempo changes
     * or sounds which don't contain tempo (like pure speech) which would correspond to a low value in this
     * field.
     */
    public function getTempoConfidence(): ?float
    {
        return $this->tempoConfidence;
    }

    /**
     * Sets Tempo Confidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the tempo. Some tracks contain tempo changes
     * or sounds which don't contain tempo (like pure speech) which would correspond to a low value in this
     * field.
     *
     * @maps tempo_confidence
     */
    public function setTempoConfidence(?float $tempoConfidence): void
    {
        $this->tempoConfidence = $tempoConfidence;
    }

    /**
     * Returns Key.
     * The estimated overall key of the section. The values in this field ranging from 0 to 11 mapping to
     * pitches using standard Pitch Class notation (E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on). If no key was
     * detected, the value is -1.
     */
    public function getKey(): ?int
    {
        return $this->key;
    }

    /**
     * Sets Key.
     * The estimated overall key of the section. The values in this field ranging from 0 to 11 mapping to
     * pitches using standard Pitch Class notation (E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on). If no key was
     * detected, the value is -1.
     *
     * @maps key
     */
    public function setKey(?int $key): void
    {
        $this->key = $key;
    }

    /**
     * Returns Key Confidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the key. Songs with many key changes may
     * correspond to low values in this field.
     */
    public function getKeyConfidence(): ?float
    {
        return $this->keyConfidence;
    }

    /**
     * Sets Key Confidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the key. Songs with many key changes may
     * correspond to low values in this field.
     *
     * @maps key_confidence
     */
    public function setKeyConfidence(?float $keyConfidence): void
    {
        $this->keyConfidence = $keyConfidence;
    }

    /**
     * Returns Mode.
     * Indicates the modality (major or minor) of a section, the type of scale from which its melodic
     * content is derived. This field will contain a 0 for "minor", a 1 for "major", or a -1 for no result.
     * Note that the major key (e.g. C major) could more likely be confused with the minor key at 3
     * semitones lower (e.g. A minor) as both keys carry the same pitches.
     */
    public function getMode(): ?int
    {
        return $this->mode;
    }

    /**
     * Sets Mode.
     * Indicates the modality (major or minor) of a section, the type of scale from which its melodic
     * content is derived. This field will contain a 0 for "minor", a 1 for "major", or a -1 for no result.
     * Note that the major key (e.g. C major) could more likely be confused with the minor key at 3
     * semitones lower (e.g. A minor) as both keys carry the same pitches.
     *
     * @maps mode
     * @factory \SpotifyWebAPILib\Models\ModeEnum::checkValue
     */
    public function setMode(?int $mode): void
    {
        $this->mode = $mode;
    }

    /**
     * Returns Mode Confidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
     */
    public function getModeConfidence(): ?float
    {
        return $this->modeConfidence;
    }

    /**
     * Sets Mode Confidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
     *
     * @maps mode_confidence
     */
    public function setModeConfidence(?float $modeConfidence): void
    {
        $this->modeConfidence = $modeConfidence;
    }

    /**
     * Returns Time Signature.
     * An estimated time signature. The time signature (meter) is a notational convention to specify how
     * many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time
     * signatures of "3/4", to "7/4".
     */
    public function getTimeSignature(): ?int
    {
        return $this->timeSignature;
    }

    /**
     * Sets Time Signature.
     * An estimated time signature. The time signature (meter) is a notational convention to specify how
     * many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time
     * signatures of "3/4", to "7/4".
     *
     * @maps time_signature
     */
    public function setTimeSignature(?int $timeSignature): void
    {
        $this->timeSignature = $timeSignature;
    }

    /**
     * Returns Time Signature Confidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`. Sections with time
     * signature changes may correspond to low values in this field.
     */
    public function getTimeSignatureConfidence(): ?float
    {
        return $this->timeSignatureConfidence;
    }

    /**
     * Sets Time Signature Confidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`. Sections with time
     * signature changes may correspond to low values in this field.
     *
     * @maps time_signature_confidence
     */
    public function setTimeSignatureConfidence(?float $timeSignatureConfidence): void
    {
        $this->timeSignatureConfidence = $timeSignatureConfidence;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->start)) {
            $json['start']                     = $this->start;
        }
        if (isset($this->duration)) {
            $json['duration']                  = $this->duration;
        }
        if (isset($this->confidence)) {
            $json['confidence']                = $this->confidence;
        }
        if (isset($this->loudness)) {
            $json['loudness']                  = $this->loudness;
        }
        if (isset($this->tempo)) {
            $json['tempo']                     = $this->tempo;
        }
        if (isset($this->tempoConfidence)) {
            $json['tempo_confidence']          = $this->tempoConfidence;
        }
        if (isset($this->key)) {
            $json['key']                       = $this->key;
        }
        if (isset($this->keyConfidence)) {
            $json['key_confidence']            = $this->keyConfidence;
        }
        if (isset($this->mode)) {
            $json['mode']                      = ModeEnum::checkValue($this->mode);
        }
        if (isset($this->modeConfidence)) {
            $json['mode_confidence']           = $this->modeConfidence;
        }
        if (isset($this->timeSignature)) {
            $json['time_signature']            = $this->timeSignature;
        }
        if (isset($this->timeSignatureConfidence)) {
            $json['time_signature_confidence'] = $this->timeSignatureConfidence;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
