<?php

declare(strict_types=1);

/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpotifyWebAPILib\Models;

use stdClass;

class PrivateUserObject implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $country;

    /**
     * @var string|null
     */
    private $displayName;

    /**
     * @var string|null
     */
    private $email;

    /**
     * @var ExplicitContentSettingsObject|null
     */
    private $explicitContent;

    /**
     * @var ExternalUrlObject|null
     */
    private $externalUrls;

    /**
     * @var FollowersObject|null
     */
    private $followers;

    /**
     * @var string|null
     */
    private $href;

    /**
     * @var string|null
     */
    private $id;

    /**
     * @var ImageObject[]|null
     */
    private $images;

    /**
     * @var string|null
     */
    private $product;

    /**
     * @var string|null
     */
    private $type;

    /**
     * @var string|null
     */
    private $uri;

    /**
     * Returns Country.
     * The country of the user, as set in the user's account profile. An [ISO 3166-1 alpha-2 country
     * code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _This field is only available when the
     * current user has granted access to the [user-read-private](/documentation/web-
     * api/concepts/scopes/#list-of-scopes) scope._
     */
    public function getCountry(): ?string
    {
        return $this->country;
    }

    /**
     * Sets Country.
     * The country of the user, as set in the user's account profile. An [ISO 3166-1 alpha-2 country
     * code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _This field is only available when the
     * current user has granted access to the [user-read-private](/documentation/web-
     * api/concepts/scopes/#list-of-scopes) scope._
     *
     * @maps country
     */
    public function setCountry(?string $country): void
    {
        $this->country = $country;
    }

    /**
     * Returns Display Name.
     * The name displayed on the user's profile. `null` if not available.
     */
    public function getDisplayName(): ?string
    {
        return $this->displayName;
    }

    /**
     * Sets Display Name.
     * The name displayed on the user's profile. `null` if not available.
     *
     * @maps display_name
     */
    public function setDisplayName(?string $displayName): void
    {
        $this->displayName = $displayName;
    }

    /**
     * Returns Email.
     * The user's email address, as entered by the user when creating their account. _**Important!** This
     * email address is unverified; there is no proof that it actually belongs to the user._ _This field is
     * only available when the current user has granted access to the [user-read-email](/documentation/web-
     * api/concepts/scopes/#list-of-scopes) scope._
     */
    public function getEmail(): ?string
    {
        return $this->email;
    }

    /**
     * Sets Email.
     * The user's email address, as entered by the user when creating their account. _**Important!** This
     * email address is unverified; there is no proof that it actually belongs to the user._ _This field is
     * only available when the current user has granted access to the [user-read-email](/documentation/web-
     * api/concepts/scopes/#list-of-scopes) scope._
     *
     * @maps email
     */
    public function setEmail(?string $email): void
    {
        $this->email = $email;
    }

    /**
     * Returns Explicit Content.
     * The user's explicit content settings. _This field is only available when the current user has
     * granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes)
     * scope._
     */
    public function getExplicitContent(): ?ExplicitContentSettingsObject
    {
        return $this->explicitContent;
    }

    /**
     * Sets Explicit Content.
     * The user's explicit content settings. _This field is only available when the current user has
     * granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes)
     * scope._
     *
     * @maps explicit_content
     */
    public function setExplicitContent(?ExplicitContentSettingsObject $explicitContent): void
    {
        $this->explicitContent = $explicitContent;
    }

    /**
     * Returns External Urls.
     * Known external URLs for this user.
     */
    public function getExternalUrls(): ?ExternalUrlObject
    {
        return $this->externalUrls;
    }

    /**
     * Sets External Urls.
     * Known external URLs for this user.
     *
     * @maps external_urls
     */
    public function setExternalUrls(?ExternalUrlObject $externalUrls): void
    {
        $this->externalUrls = $externalUrls;
    }

    /**
     * Returns Followers.
     * Information about the followers of the user.
     */
    public function getFollowers(): ?FollowersObject
    {
        return $this->followers;
    }

    /**
     * Sets Followers.
     * Information about the followers of the user.
     *
     * @maps followers
     */
    public function setFollowers(?FollowersObject $followers): void
    {
        $this->followers = $followers;
    }

    /**
     * Returns Href.
     * A link to the Web API endpoint for this user.
     */
    public function getHref(): ?string
    {
        return $this->href;
    }

    /**
     * Sets Href.
     * A link to the Web API endpoint for this user.
     *
     * @maps href
     */
    public function setHref(?string $href): void
    {
        $this->href = $href;
    }

    /**
     * Returns Id.
     * The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for the user.
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for the user.
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Images.
     * The user's profile image.
     *
     * @return ImageObject[]|null
     */
    public function getImages(): ?array
    {
        return $this->images;
    }

    /**
     * Sets Images.
     * The user's profile image.
     *
     * @maps images
     *
     * @param ImageObject[]|null $images
     */
    public function setImages(?array $images): void
    {
        $this->images = $images;
    }

    /**
     * Returns Product.
     * The user's Spotify subscription level: "premium", "free", etc. (The subscription level "open" can be
     * considered the same as "free".) _This field is only available when the current user has granted
     * access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
     */
    public function getProduct(): ?string
    {
        return $this->product;
    }

    /**
     * Sets Product.
     * The user's Spotify subscription level: "premium", "free", etc. (The subscription level "open" can be
     * considered the same as "free".) _This field is only available when the current user has granted
     * access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
     *
     * @maps product
     */
    public function setProduct(?string $product): void
    {
        $this->product = $product;
    }

    /**
     * Returns Type.
     * The object type: "user"
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * The object type: "user"
     *
     * @maps type
     */
    public function setType(?string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the user.
     */
    public function getUri(): ?string
    {
        return $this->uri;
    }

    /**
     * Sets Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the user.
     *
     * @maps uri
     */
    public function setUri(?string $uri): void
    {
        $this->uri = $uri;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->country)) {
            $json['country']          = $this->country;
        }
        if (isset($this->displayName)) {
            $json['display_name']     = $this->displayName;
        }
        if (isset($this->email)) {
            $json['email']            = $this->email;
        }
        if (isset($this->explicitContent)) {
            $json['explicit_content'] = $this->explicitContent;
        }
        if (isset($this->externalUrls)) {
            $json['external_urls']    = $this->externalUrls;
        }
        if (isset($this->followers)) {
            $json['followers']        = $this->followers;
        }
        if (isset($this->href)) {
            $json['href']             = $this->href;
        }
        if (isset($this->id)) {
            $json['id']               = $this->id;
        }
        if (isset($this->images)) {
            $json['images']           = $this->images;
        }
        if (isset($this->product)) {
            $json['product']          = $this->product;
        }
        if (isset($this->type)) {
            $json['type']             = $this->type;
        }
        if (isset($this->uri)) {
            $json['uri']              = $this->uri;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
